// Generated by gencpp from file fukuro_common/Obstacle.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_OBSTACLE_H
#define FUKURO_COMMON_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fukuro_common/Point2d.h>

namespace fukuro_common
{
template <class ContainerAllocator>
struct Obstacle_
{
  typedef Obstacle_<ContainerAllocator> Type;

  Obstacle_()
    : pos()
    , r(0.0)
    , shape(0)  {
    }
  Obstacle_(const ContainerAllocator& _alloc)
    : pos(_alloc)
    , r(0.0)
    , shape(0)  {
  (void)_alloc;
    }



   typedef  ::fukuro_common::Point2d_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef double _r_type;
  _r_type r;

   typedef int8_t _shape_type;
  _shape_type shape;





  typedef boost::shared_ptr< ::fukuro_common::Obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::Obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacle_

typedef ::fukuro_common::Obstacle_<std::allocator<void> > Obstacle;

typedef boost::shared_ptr< ::fukuro_common::Obstacle > ObstaclePtr;
typedef boost::shared_ptr< ::fukuro_common::Obstacle const> ObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::Obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::Obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::Obstacle_<ContainerAllocator1> & lhs, const ::fukuro_common::Obstacle_<ContainerAllocator2> & rhs)
{
  return lhs.pos == rhs.pos &&
    lhs.r == rhs.r &&
    lhs.shape == rhs.shape;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::Obstacle_<ContainerAllocator1> & lhs, const ::fukuro_common::Obstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "204658f3eba3518a7ff5338be777b1e8";
  }

  static const char* value(const ::fukuro_common::Obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x204658f3eba3518aULL;
  static const uint64_t static_value2 = 0x7ff5338be777b1e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/Obstacle";
  }

  static const char* value(const ::fukuro_common::Obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point2d pos\n"
"float64 r\n"
"int8 shape\n"
"================================================================================\n"
"MSG: fukuro_common/Point2d\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::fukuro_common::Obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::Obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
      stream.next(m.r);
      stream.next(m.shape);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::Obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::Obstacle_<ContainerAllocator>& v)
  {
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::fukuro_common::Point2d_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "r: ";
    Printer<double>::stream(s, indent + "  ", v.r);
    s << indent << "shape: ";
    Printer<int8_t>::stream(s, indent + "  ", v.shape);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_OBSTACLE_H
