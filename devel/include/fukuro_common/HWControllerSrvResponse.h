// Generated by gencpp from file fukuro_common/HWControllerSrvResponse.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_HWCONTROLLERSRVRESPONSE_H
#define FUKURO_COMMON_MESSAGE_HWCONTROLLERSRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fukuro_common
{
template <class ContainerAllocator>
struct HWControllerSrvResponse_
{
  typedef HWControllerSrvResponse_<ContainerAllocator> Type;

  HWControllerSrvResponse_()
    : port_list()
    , manufacturer_list()
    , STMSuccess(0)
    , ArduinoSuccess(0)
    , Compassuccess(0)  {
    }
  HWControllerSrvResponse_(const ContainerAllocator& _alloc)
    : port_list(_alloc)
    , manufacturer_list(_alloc)
    , STMSuccess(0)
    , ArduinoSuccess(0)
    , Compassuccess(0)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _port_list_type;
  _port_list_type port_list;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _manufacturer_list_type;
  _manufacturer_list_type manufacturer_list;

   typedef uint8_t _STMSuccess_type;
  _STMSuccess_type STMSuccess;

   typedef uint8_t _ArduinoSuccess_type;
  _ArduinoSuccess_type ArduinoSuccess;

   typedef uint8_t _Compassuccess_type;
  _Compassuccess_type Compassuccess;





  typedef boost::shared_ptr< ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct HWControllerSrvResponse_

typedef ::fukuro_common::HWControllerSrvResponse_<std::allocator<void> > HWControllerSrvResponse;

typedef boost::shared_ptr< ::fukuro_common::HWControllerSrvResponse > HWControllerSrvResponsePtr;
typedef boost::shared_ptr< ::fukuro_common::HWControllerSrvResponse const> HWControllerSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator1> & lhs, const ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.port_list == rhs.port_list &&
    lhs.manufacturer_list == rhs.manufacturer_list &&
    lhs.STMSuccess == rhs.STMSuccess &&
    lhs.ArduinoSuccess == rhs.ArduinoSuccess &&
    lhs.Compassuccess == rhs.Compassuccess;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator1> & lhs, const ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15c18a38ca129ceffe9c3e2ec45ec9e1";
  }

  static const char* value(const ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15c18a38ca129cefULL;
  static const uint64_t static_value2 = 0xfe9c3e2ec45ec9e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/HWControllerSrvResponse";
  }

  static const char* value(const ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] port_list\n"
"string[] manufacturer_list\n"
"uint8 STMSuccess\n"
"uint8 ArduinoSuccess\n"
"uint8 Compassuccess\n"
;
  }

  static const char* value(const ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.port_list);
      stream.next(m.manufacturer_list);
      stream.next(m.STMSuccess);
      stream.next(m.ArduinoSuccess);
      stream.next(m.Compassuccess);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HWControllerSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::HWControllerSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "port_list[]" << std::endl;
    for (size_t i = 0; i < v.port_list.size(); ++i)
    {
      s << indent << "  port_list[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.port_list[i]);
    }
    s << indent << "manufacturer_list[]" << std::endl;
    for (size_t i = 0; i < v.manufacturer_list.size(); ++i)
    {
      s << indent << "  manufacturer_list[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.manufacturer_list[i]);
    }
    s << indent << "STMSuccess: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.STMSuccess);
    s << indent << "ArduinoSuccess: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ArduinoSuccess);
    s << indent << "Compassuccess: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Compassuccess);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_HWCONTROLLERSRVRESPONSE_H
