// Generated by gencpp from file fukuro_common/StrategyParam.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_STRATEGYPARAM_H
#define FUKURO_COMMON_MESSAGE_STRATEGYPARAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fukuro_common
{
template <class ContainerAllocator>
struct StrategyParam_
{
  typedef StrategyParam_<ContainerAllocator> Type;

  StrategyParam_()
    : radius_dribble_auto_on(0.0)
    , angle_dribble_auto_on(0.0)
    , radius_mulai_dribble_bola(0.0)
    , angle_mulai_dribble_bola(0.0)
    , min_error_posisi_kick(0.0)
    , min_error_sudut_kick(0.0)
    , min_error_posisi_homing(0.0)
    , min_error_sudut_homing(0.0)
    , error_positioning(0.0)
    , error_sudut_positioning(0.0)
    , radius_mulai_kick_off(0.0)
    , upper_saturate(0.0)
    , lower_saturate(0.0)
    , upper_saturate_engaged(0.0)
    , lower_saturate_engaged(0.0)
    , max_angle_saturate(0.0)  {
    }
  StrategyParam_(const ContainerAllocator& _alloc)
    : radius_dribble_auto_on(0.0)
    , angle_dribble_auto_on(0.0)
    , radius_mulai_dribble_bola(0.0)
    , angle_mulai_dribble_bola(0.0)
    , min_error_posisi_kick(0.0)
    , min_error_sudut_kick(0.0)
    , min_error_posisi_homing(0.0)
    , min_error_sudut_homing(0.0)
    , error_positioning(0.0)
    , error_sudut_positioning(0.0)
    , radius_mulai_kick_off(0.0)
    , upper_saturate(0.0)
    , lower_saturate(0.0)
    , upper_saturate_engaged(0.0)
    , lower_saturate_engaged(0.0)
    , max_angle_saturate(0.0)  {
  (void)_alloc;
    }



   typedef float _radius_dribble_auto_on_type;
  _radius_dribble_auto_on_type radius_dribble_auto_on;

   typedef float _angle_dribble_auto_on_type;
  _angle_dribble_auto_on_type angle_dribble_auto_on;

   typedef float _radius_mulai_dribble_bola_type;
  _radius_mulai_dribble_bola_type radius_mulai_dribble_bola;

   typedef float _angle_mulai_dribble_bola_type;
  _angle_mulai_dribble_bola_type angle_mulai_dribble_bola;

   typedef float _min_error_posisi_kick_type;
  _min_error_posisi_kick_type min_error_posisi_kick;

   typedef float _min_error_sudut_kick_type;
  _min_error_sudut_kick_type min_error_sudut_kick;

   typedef float _min_error_posisi_homing_type;
  _min_error_posisi_homing_type min_error_posisi_homing;

   typedef float _min_error_sudut_homing_type;
  _min_error_sudut_homing_type min_error_sudut_homing;

   typedef float _error_positioning_type;
  _error_positioning_type error_positioning;

   typedef float _error_sudut_positioning_type;
  _error_sudut_positioning_type error_sudut_positioning;

   typedef float _radius_mulai_kick_off_type;
  _radius_mulai_kick_off_type radius_mulai_kick_off;

   typedef float _upper_saturate_type;
  _upper_saturate_type upper_saturate;

   typedef float _lower_saturate_type;
  _lower_saturate_type lower_saturate;

   typedef float _upper_saturate_engaged_type;
  _upper_saturate_engaged_type upper_saturate_engaged;

   typedef float _lower_saturate_engaged_type;
  _lower_saturate_engaged_type lower_saturate_engaged;

   typedef float _max_angle_saturate_type;
  _max_angle_saturate_type max_angle_saturate;





  typedef boost::shared_ptr< ::fukuro_common::StrategyParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::StrategyParam_<ContainerAllocator> const> ConstPtr;

}; // struct StrategyParam_

typedef ::fukuro_common::StrategyParam_<std::allocator<void> > StrategyParam;

typedef boost::shared_ptr< ::fukuro_common::StrategyParam > StrategyParamPtr;
typedef boost::shared_ptr< ::fukuro_common::StrategyParam const> StrategyParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::StrategyParam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::StrategyParam_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::StrategyParam_<ContainerAllocator1> & lhs, const ::fukuro_common::StrategyParam_<ContainerAllocator2> & rhs)
{
  return lhs.radius_dribble_auto_on == rhs.radius_dribble_auto_on &&
    lhs.angle_dribble_auto_on == rhs.angle_dribble_auto_on &&
    lhs.radius_mulai_dribble_bola == rhs.radius_mulai_dribble_bola &&
    lhs.angle_mulai_dribble_bola == rhs.angle_mulai_dribble_bola &&
    lhs.min_error_posisi_kick == rhs.min_error_posisi_kick &&
    lhs.min_error_sudut_kick == rhs.min_error_sudut_kick &&
    lhs.min_error_posisi_homing == rhs.min_error_posisi_homing &&
    lhs.min_error_sudut_homing == rhs.min_error_sudut_homing &&
    lhs.error_positioning == rhs.error_positioning &&
    lhs.error_sudut_positioning == rhs.error_sudut_positioning &&
    lhs.radius_mulai_kick_off == rhs.radius_mulai_kick_off &&
    lhs.upper_saturate == rhs.upper_saturate &&
    lhs.lower_saturate == rhs.lower_saturate &&
    lhs.upper_saturate_engaged == rhs.upper_saturate_engaged &&
    lhs.lower_saturate_engaged == rhs.lower_saturate_engaged &&
    lhs.max_angle_saturate == rhs.max_angle_saturate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::StrategyParam_<ContainerAllocator1> & lhs, const ::fukuro_common::StrategyParam_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::StrategyParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::StrategyParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::StrategyParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::StrategyParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::StrategyParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::StrategyParam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::StrategyParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "21766f045e3facf112f156a585dc8583";
  }

  static const char* value(const ::fukuro_common::StrategyParam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x21766f045e3facf1ULL;
  static const uint64_t static_value2 = 0x12f156a585dc8583ULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::StrategyParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/StrategyParam";
  }

  static const char* value(const ::fukuro_common::StrategyParam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::StrategyParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 radius_dribble_auto_on\n"
"float32 angle_dribble_auto_on\n"
"float32 radius_mulai_dribble_bola\n"
"float32 angle_mulai_dribble_bola\n"
"float32 min_error_posisi_kick\n"
"float32 min_error_sudut_kick\n"
"float32 min_error_posisi_homing\n"
"float32 min_error_sudut_homing\n"
"float32 error_positioning\n"
"float32 error_sudut_positioning\n"
"float32 radius_mulai_kick_off\n"
"float32 upper_saturate\n"
"float32 lower_saturate\n"
"float32 upper_saturate_engaged\n"
"float32 lower_saturate_engaged\n"
"float32 max_angle_saturate\n"
;
  }

  static const char* value(const ::fukuro_common::StrategyParam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::StrategyParam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.radius_dribble_auto_on);
      stream.next(m.angle_dribble_auto_on);
      stream.next(m.radius_mulai_dribble_bola);
      stream.next(m.angle_mulai_dribble_bola);
      stream.next(m.min_error_posisi_kick);
      stream.next(m.min_error_sudut_kick);
      stream.next(m.min_error_posisi_homing);
      stream.next(m.min_error_sudut_homing);
      stream.next(m.error_positioning);
      stream.next(m.error_sudut_positioning);
      stream.next(m.radius_mulai_kick_off);
      stream.next(m.upper_saturate);
      stream.next(m.lower_saturate);
      stream.next(m.upper_saturate_engaged);
      stream.next(m.lower_saturate_engaged);
      stream.next(m.max_angle_saturate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StrategyParam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::StrategyParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::StrategyParam_<ContainerAllocator>& v)
  {
    s << indent << "radius_dribble_auto_on: ";
    Printer<float>::stream(s, indent + "  ", v.radius_dribble_auto_on);
    s << indent << "angle_dribble_auto_on: ";
    Printer<float>::stream(s, indent + "  ", v.angle_dribble_auto_on);
    s << indent << "radius_mulai_dribble_bola: ";
    Printer<float>::stream(s, indent + "  ", v.radius_mulai_dribble_bola);
    s << indent << "angle_mulai_dribble_bola: ";
    Printer<float>::stream(s, indent + "  ", v.angle_mulai_dribble_bola);
    s << indent << "min_error_posisi_kick: ";
    Printer<float>::stream(s, indent + "  ", v.min_error_posisi_kick);
    s << indent << "min_error_sudut_kick: ";
    Printer<float>::stream(s, indent + "  ", v.min_error_sudut_kick);
    s << indent << "min_error_posisi_homing: ";
    Printer<float>::stream(s, indent + "  ", v.min_error_posisi_homing);
    s << indent << "min_error_sudut_homing: ";
    Printer<float>::stream(s, indent + "  ", v.min_error_sudut_homing);
    s << indent << "error_positioning: ";
    Printer<float>::stream(s, indent + "  ", v.error_positioning);
    s << indent << "error_sudut_positioning: ";
    Printer<float>::stream(s, indent + "  ", v.error_sudut_positioning);
    s << indent << "radius_mulai_kick_off: ";
    Printer<float>::stream(s, indent + "  ", v.radius_mulai_kick_off);
    s << indent << "upper_saturate: ";
    Printer<float>::stream(s, indent + "  ", v.upper_saturate);
    s << indent << "lower_saturate: ";
    Printer<float>::stream(s, indent + "  ", v.lower_saturate);
    s << indent << "upper_saturate_engaged: ";
    Printer<float>::stream(s, indent + "  ", v.upper_saturate_engaged);
    s << indent << "lower_saturate_engaged: ";
    Printer<float>::stream(s, indent + "  ", v.lower_saturate_engaged);
    s << indent << "max_angle_saturate: ";
    Printer<float>::stream(s, indent + "  ", v.max_angle_saturate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_STRATEGYPARAM_H
