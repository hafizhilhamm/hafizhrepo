// Generated by gencpp from file fukuro_common/OmnivisionInfo.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_OMNIVISIONINFO_H
#define FUKURO_COMMON_MESSAGE_OMNIVISIONINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fukuro_common/Point2d.h>
#include <fukuro_common/Point2d.h>
#include <fukuro_common/Point2d.h>

namespace fukuro_common
{
template <class ContainerAllocator>
struct OmnivisionInfo_
{
  typedef OmnivisionInfo_<ContainerAllocator> Type;

  OmnivisionInfo_()
    : local_ball()
    , ball_visible(false)
    , local_obstacle()
    , obs_visible(false)
    , robot_friend_pos()
    , friend_visible(false)  {
    }
  OmnivisionInfo_(const ContainerAllocator& _alloc)
    : local_ball(_alloc)
    , ball_visible(false)
    , local_obstacle(_alloc)
    , obs_visible(false)
    , robot_friend_pos(_alloc)
    , friend_visible(false)  {
  (void)_alloc;
    }



   typedef  ::fukuro_common::Point2d_<ContainerAllocator>  _local_ball_type;
  _local_ball_type local_ball;

   typedef uint8_t _ball_visible_type;
  _ball_visible_type ball_visible;

   typedef  ::fukuro_common::Point2d_<ContainerAllocator>  _local_obstacle_type;
  _local_obstacle_type local_obstacle;

   typedef uint8_t _obs_visible_type;
  _obs_visible_type obs_visible;

   typedef  ::fukuro_common::Point2d_<ContainerAllocator>  _robot_friend_pos_type;
  _robot_friend_pos_type robot_friend_pos;

   typedef uint8_t _friend_visible_type;
  _friend_visible_type friend_visible;





  typedef boost::shared_ptr< ::fukuro_common::OmnivisionInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::OmnivisionInfo_<ContainerAllocator> const> ConstPtr;

}; // struct OmnivisionInfo_

typedef ::fukuro_common::OmnivisionInfo_<std::allocator<void> > OmnivisionInfo;

typedef boost::shared_ptr< ::fukuro_common::OmnivisionInfo > OmnivisionInfoPtr;
typedef boost::shared_ptr< ::fukuro_common::OmnivisionInfo const> OmnivisionInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::OmnivisionInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::OmnivisionInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::OmnivisionInfo_<ContainerAllocator1> & lhs, const ::fukuro_common::OmnivisionInfo_<ContainerAllocator2> & rhs)
{
  return lhs.local_ball == rhs.local_ball &&
    lhs.ball_visible == rhs.ball_visible &&
    lhs.local_obstacle == rhs.local_obstacle &&
    lhs.obs_visible == rhs.obs_visible &&
    lhs.robot_friend_pos == rhs.robot_friend_pos &&
    lhs.friend_visible == rhs.friend_visible;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::OmnivisionInfo_<ContainerAllocator1> & lhs, const ::fukuro_common::OmnivisionInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::OmnivisionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::OmnivisionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::OmnivisionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::OmnivisionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::OmnivisionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::OmnivisionInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::OmnivisionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fba85346654e08337110412dda45e35e";
  }

  static const char* value(const ::fukuro_common::OmnivisionInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfba85346654e0833ULL;
  static const uint64_t static_value2 = 0x7110412dda45e35eULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::OmnivisionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/OmnivisionInfo";
  }

  static const char* value(const ::fukuro_common::OmnivisionInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::OmnivisionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point2d local_ball\n"
"bool ball_visible\n"
"Point2d local_obstacle\n"
"bool obs_visible\n"
"Point2d robot_friend_pos\n"
"bool friend_visible\n"
"================================================================================\n"
"MSG: fukuro_common/Point2d\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::fukuro_common::OmnivisionInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::OmnivisionInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.local_ball);
      stream.next(m.ball_visible);
      stream.next(m.local_obstacle);
      stream.next(m.obs_visible);
      stream.next(m.robot_friend_pos);
      stream.next(m.friend_visible);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OmnivisionInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::OmnivisionInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::OmnivisionInfo_<ContainerAllocator>& v)
  {
    s << indent << "local_ball: ";
    s << std::endl;
    Printer< ::fukuro_common::Point2d_<ContainerAllocator> >::stream(s, indent + "  ", v.local_ball);
    s << indent << "ball_visible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ball_visible);
    s << indent << "local_obstacle: ";
    s << std::endl;
    Printer< ::fukuro_common::Point2d_<ContainerAllocator> >::stream(s, indent + "  ", v.local_obstacle);
    s << indent << "obs_visible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obs_visible);
    s << indent << "robot_friend_pos: ";
    s << std::endl;
    Printer< ::fukuro_common::Point2d_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_friend_pos);
    s << indent << "friend_visible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.friend_visible);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_OMNIVISIONINFO_H
