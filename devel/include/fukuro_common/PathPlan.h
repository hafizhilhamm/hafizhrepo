// Generated by gencpp from file fukuro_common/PathPlan.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_PATHPLAN_H
#define FUKURO_COMMON_MESSAGE_PATHPLAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fukuro_common/Point2d.h>
#include <fukuro_common/Point2d.h>
#include <fukuro_common/Point2d.h>
#include <fukuro_common/Point2d.h>

namespace fukuro_common
{
template <class ContainerAllocator>
struct PathPlan_
{
  typedef PathPlan_<ContainerAllocator> Type;

  PathPlan_()
    : obstacles()
    , solutions()
    , start()
    , goal()
    , search_time(0.0)
    , solved(false)
    , updated(false)  {
    }
  PathPlan_(const ContainerAllocator& _alloc)
    : obstacles(_alloc)
    , solutions(_alloc)
    , start(_alloc)
    , goal(_alloc)
    , search_time(0.0)
    , solved(false)
    , updated(false)  {
  (void)_alloc;
    }



   typedef std::vector< ::fukuro_common::Point2d_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fukuro_common::Point2d_<ContainerAllocator> >::other >  _obstacles_type;
  _obstacles_type obstacles;

   typedef std::vector< ::fukuro_common::Point2d_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fukuro_common::Point2d_<ContainerAllocator> >::other >  _solutions_type;
  _solutions_type solutions;

   typedef  ::fukuro_common::Point2d_<ContainerAllocator>  _start_type;
  _start_type start;

   typedef  ::fukuro_common::Point2d_<ContainerAllocator>  _goal_type;
  _goal_type goal;

   typedef double _search_time_type;
  _search_time_type search_time;

   typedef uint8_t _solved_type;
  _solved_type solved;

   typedef uint8_t _updated_type;
  _updated_type updated;





  typedef boost::shared_ptr< ::fukuro_common::PathPlan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::PathPlan_<ContainerAllocator> const> ConstPtr;

}; // struct PathPlan_

typedef ::fukuro_common::PathPlan_<std::allocator<void> > PathPlan;

typedef boost::shared_ptr< ::fukuro_common::PathPlan > PathPlanPtr;
typedef boost::shared_ptr< ::fukuro_common::PathPlan const> PathPlanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::PathPlan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::PathPlan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::PathPlan_<ContainerAllocator1> & lhs, const ::fukuro_common::PathPlan_<ContainerAllocator2> & rhs)
{
  return lhs.obstacles == rhs.obstacles &&
    lhs.solutions == rhs.solutions &&
    lhs.start == rhs.start &&
    lhs.goal == rhs.goal &&
    lhs.search_time == rhs.search_time &&
    lhs.solved == rhs.solved &&
    lhs.updated == rhs.updated;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::PathPlan_<ContainerAllocator1> & lhs, const ::fukuro_common::PathPlan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::PathPlan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::PathPlan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::PathPlan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::PathPlan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::PathPlan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::PathPlan_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::PathPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bac9c86aba64a149e610ac3cafcaef0c";
  }

  static const char* value(const ::fukuro_common::PathPlan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbac9c86aba64a149ULL;
  static const uint64_t static_value2 = 0xe610ac3cafcaef0cULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::PathPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/PathPlan";
  }

  static const char* value(const ::fukuro_common::PathPlan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::PathPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point2d[] obstacles\n"
"Point2d[] solutions\n"
"Point2d start\n"
"Point2d goal\n"
"float64 search_time\n"
"bool solved\n"
"bool updated\n"
"================================================================================\n"
"MSG: fukuro_common/Point2d\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::fukuro_common::PathPlan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::PathPlan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obstacles);
      stream.next(m.solutions);
      stream.next(m.start);
      stream.next(m.goal);
      stream.next(m.search_time);
      stream.next(m.solved);
      stream.next(m.updated);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathPlan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::PathPlan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::PathPlan_<ContainerAllocator>& v)
  {
    s << indent << "obstacles[]" << std::endl;
    for (size_t i = 0; i < v.obstacles.size(); ++i)
    {
      s << indent << "  obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fukuro_common::Point2d_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacles[i]);
    }
    s << indent << "solutions[]" << std::endl;
    for (size_t i = 0; i < v.solutions.size(); ++i)
    {
      s << indent << "  solutions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fukuro_common::Point2d_<ContainerAllocator> >::stream(s, indent + "    ", v.solutions[i]);
    }
    s << indent << "start: ";
    s << std::endl;
    Printer< ::fukuro_common::Point2d_<ContainerAllocator> >::stream(s, indent + "  ", v.start);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::fukuro_common::Point2d_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
    s << indent << "search_time: ";
    Printer<double>::stream(s, indent + "  ", v.search_time);
    s << indent << "solved: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.solved);
    s << indent << "updated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.updated);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_PATHPLAN_H
