// Generated by gencpp from file fukuro_common/LocalizationSrvRequest.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_LOCALIZATIONSRVREQUEST_H
#define FUKURO_COMMON_MESSAGE_LOCALIZATIONSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fukuro_common
{
template <class ContainerAllocator>
struct LocalizationSrvRequest_
{
  typedef LocalizationSrvRequest_<ContainerAllocator> Type;

  LocalizationSrvRequest_()
    : x(0.0)
    , y(0.0)
    , w(0.0)
    , initial_pos(0)  {
    }
  LocalizationSrvRequest_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , w(0.0)
    , initial_pos(0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _w_type;
  _w_type w;

   typedef uint8_t _initial_pos_type;
  _initial_pos_type initial_pos;





  typedef boost::shared_ptr< ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LocalizationSrvRequest_

typedef ::fukuro_common::LocalizationSrvRequest_<std::allocator<void> > LocalizationSrvRequest;

typedef boost::shared_ptr< ::fukuro_common::LocalizationSrvRequest > LocalizationSrvRequestPtr;
typedef boost::shared_ptr< ::fukuro_common::LocalizationSrvRequest const> LocalizationSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator1> & lhs, const ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.w == rhs.w &&
    lhs.initial_pos == rhs.initial_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator1> & lhs, const ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4b2d4e2b93ce3abeef0af878ab6cd7b";
  }

  static const char* value(const ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4b2d4e2b93ce3abULL;
  static const uint64_t static_value2 = 0xeef0af878ab6cd7bULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/LocalizationSrvRequest";
  }

  static const char* value(const ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 w\n"
"uint8 initial_pos\n"
;
  }

  static const char* value(const ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.w);
      stream.next(m.initial_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalizationSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::LocalizationSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "w: ";
    Printer<double>::stream(s, indent + "  ", v.w);
    s << indent << "initial_pos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.initial_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_LOCALIZATIONSRVREQUEST_H
