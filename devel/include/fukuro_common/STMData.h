// Generated by gencpp from file fukuro_common/STMData.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_STMDATA_H
#define FUKURO_COMMON_MESSAGE_STMDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fukuro_common/MotorVel.h>
#include <fukuro_common/RobotVel.h>

namespace fukuro_common
{
template <class ContainerAllocator>
struct STMData_
{
  typedef STMData_<ContainerAllocator> Type;

  STMData_()
    : encoder()
    , freeenc()
    , ready_kick(false)
    , ir(false)
    , garis1(false)
    , garis2(false)
    , garis3(false)
    , garis4(false)  {
    }
  STMData_(const ContainerAllocator& _alloc)
    : encoder(_alloc)
    , freeenc(_alloc)
    , ready_kick(false)
    , ir(false)
    , garis1(false)
    , garis2(false)
    , garis3(false)
    , garis4(false)  {
  (void)_alloc;
    }



   typedef  ::fukuro_common::MotorVel_<ContainerAllocator>  _encoder_type;
  _encoder_type encoder;

   typedef  ::fukuro_common::RobotVel_<ContainerAllocator>  _freeenc_type;
  _freeenc_type freeenc;

   typedef uint8_t _ready_kick_type;
  _ready_kick_type ready_kick;

   typedef uint8_t _ir_type;
  _ir_type ir;

   typedef uint8_t _garis1_type;
  _garis1_type garis1;

   typedef uint8_t _garis2_type;
  _garis2_type garis2;

   typedef uint8_t _garis3_type;
  _garis3_type garis3;

   typedef uint8_t _garis4_type;
  _garis4_type garis4;





  typedef boost::shared_ptr< ::fukuro_common::STMData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::STMData_<ContainerAllocator> const> ConstPtr;

}; // struct STMData_

typedef ::fukuro_common::STMData_<std::allocator<void> > STMData;

typedef boost::shared_ptr< ::fukuro_common::STMData > STMDataPtr;
typedef boost::shared_ptr< ::fukuro_common::STMData const> STMDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::STMData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::STMData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::STMData_<ContainerAllocator1> & lhs, const ::fukuro_common::STMData_<ContainerAllocator2> & rhs)
{
  return lhs.encoder == rhs.encoder &&
    lhs.freeenc == rhs.freeenc &&
    lhs.ready_kick == rhs.ready_kick &&
    lhs.ir == rhs.ir &&
    lhs.garis1 == rhs.garis1 &&
    lhs.garis2 == rhs.garis2 &&
    lhs.garis3 == rhs.garis3 &&
    lhs.garis4 == rhs.garis4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::STMData_<ContainerAllocator1> & lhs, const ::fukuro_common::STMData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::STMData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::STMData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::STMData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::STMData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::STMData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::STMData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::STMData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f74160987d11b971db5bf3af08f3ce7";
  }

  static const char* value(const ::fukuro_common::STMData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f74160987d11b97ULL;
  static const uint64_t static_value2 = 0x1db5bf3af08f3ce7ULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::STMData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/STMData";
  }

  static const char* value(const ::fukuro_common::STMData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::STMData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MotorVel encoder\n"
"RobotVel freeenc\n"
"bool ready_kick\n"
"bool ir\n"
"bool garis1\n"
"bool garis2\n"
"bool garis3\n"
"bool garis4\n"
"================================================================================\n"
"MSG: fukuro_common/MotorVel\n"
"float32 m1\n"
"float32 m2\n"
"float32 m3\n"
"================================================================================\n"
"MSG: fukuro_common/RobotVel\n"
"float32 free1\n"
"float32 free2\n"
"float32 free3\n"
;
  }

  static const char* value(const ::fukuro_common::STMData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::STMData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.encoder);
      stream.next(m.freeenc);
      stream.next(m.ready_kick);
      stream.next(m.ir);
      stream.next(m.garis1);
      stream.next(m.garis2);
      stream.next(m.garis3);
      stream.next(m.garis4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct STMData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::STMData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::STMData_<ContainerAllocator>& v)
  {
    s << indent << "encoder: ";
    s << std::endl;
    Printer< ::fukuro_common::MotorVel_<ContainerAllocator> >::stream(s, indent + "  ", v.encoder);
    s << indent << "freeenc: ";
    s << std::endl;
    Printer< ::fukuro_common::RobotVel_<ContainerAllocator> >::stream(s, indent + "  ", v.freeenc);
    s << indent << "ready_kick: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ready_kick);
    s << indent << "ir: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ir);
    s << indent << "garis1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.garis1);
    s << indent << "garis2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.garis2);
    s << indent << "garis3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.garis3);
    s << indent << "garis4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.garis4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_STMDATA_H
