// Generated by gencpp from file fukuro_common/HWControllerSrvRequest.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_HWCONTROLLERSRVREQUEST_H
#define FUKURO_COMMON_MESSAGE_HWCONTROLLERSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fukuro_common/Compass.h>

namespace fukuro_common
{
template <class ContainerAllocator>
struct HWControllerSrvRequest_
{
  typedef HWControllerSrvRequest_<ContainerAllocator> Type;

  HWControllerSrvRequest_()
    : refresh(0)
    , STMConnect(0)
    , isSTM(0)
    , ArduinoConnect(0)
    , isArduino(0)
    , Compass()  {
    }
  HWControllerSrvRequest_(const ContainerAllocator& _alloc)
    : refresh(0)
    , STMConnect(0)
    , isSTM(0)
    , ArduinoConnect(0)
    , isArduino(0)
    , Compass(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _refresh_type;
  _refresh_type refresh;

   typedef int64_t _STMConnect_type;
  _STMConnect_type STMConnect;

   typedef uint8_t _isSTM_type;
  _isSTM_type isSTM;

   typedef int64_t _ArduinoConnect_type;
  _ArduinoConnect_type ArduinoConnect;

   typedef uint8_t _isArduino_type;
  _isArduino_type isArduino;

   typedef  ::fukuro_common::Compass_<ContainerAllocator>  _Compass_type;
  _Compass_type Compass;





  typedef boost::shared_ptr< ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct HWControllerSrvRequest_

typedef ::fukuro_common::HWControllerSrvRequest_<std::allocator<void> > HWControllerSrvRequest;

typedef boost::shared_ptr< ::fukuro_common::HWControllerSrvRequest > HWControllerSrvRequestPtr;
typedef boost::shared_ptr< ::fukuro_common::HWControllerSrvRequest const> HWControllerSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator1> & lhs, const ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.refresh == rhs.refresh &&
    lhs.STMConnect == rhs.STMConnect &&
    lhs.isSTM == rhs.isSTM &&
    lhs.ArduinoConnect == rhs.ArduinoConnect &&
    lhs.isArduino == rhs.isArduino &&
    lhs.Compass == rhs.Compass;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator1> & lhs, const ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa64da40807e371629cc4f509a53fcf9";
  }

  static const char* value(const ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa64da40807e3716ULL;
  static const uint64_t static_value2 = 0x29cc4f509a53fcf9ULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/HWControllerSrvRequest";
  }

  static const char* value(const ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 refresh\n"
"int64 STMConnect\n"
"uint8 isSTM\n"
"int64 ArduinoConnect\n"
"uint8 isArduino\n"
"Compass Compass\n"
"\n"
"================================================================================\n"
"MSG: fukuro_common/Compass\n"
"float64 cmps\n"
;
  }

  static const char* value(const ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.refresh);
      stream.next(m.STMConnect);
      stream.next(m.isSTM);
      stream.next(m.ArduinoConnect);
      stream.next(m.isArduino);
      stream.next(m.Compass);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HWControllerSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::HWControllerSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "refresh: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.refresh);
    s << indent << "STMConnect: ";
    Printer<int64_t>::stream(s, indent + "  ", v.STMConnect);
    s << indent << "isSTM: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isSTM);
    s << indent << "ArduinoConnect: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ArduinoConnect);
    s << indent << "isArduino: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isArduino);
    s << indent << "Compass: ";
    s << std::endl;
    Printer< ::fukuro_common::Compass_<ContainerAllocator> >::stream(s, indent + "  ", v.Compass);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_HWCONTROLLERSRVREQUEST_H
