// Generated by gencpp from file fukuro_common/RobotUtility.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_ROBOTUTILITY_H
#define FUKURO_COMMON_MESSAGE_ROBOTUTILITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fukuro_common
{
template <class ContainerAllocator>
struct RobotUtility_
{
  typedef RobotUtility_<ContainerAllocator> Type;

  RobotUtility_()
    : ball_engage(false)
    , collision(false)
    , ready_kick(false)  {
    }
  RobotUtility_(const ContainerAllocator& _alloc)
    : ball_engage(false)
    , collision(false)
    , ready_kick(false)  {
  (void)_alloc;
    }



   typedef uint8_t _ball_engage_type;
  _ball_engage_type ball_engage;

   typedef uint8_t _collision_type;
  _collision_type collision;

   typedef uint8_t _ready_kick_type;
  _ready_kick_type ready_kick;





  typedef boost::shared_ptr< ::fukuro_common::RobotUtility_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::RobotUtility_<ContainerAllocator> const> ConstPtr;

}; // struct RobotUtility_

typedef ::fukuro_common::RobotUtility_<std::allocator<void> > RobotUtility;

typedef boost::shared_ptr< ::fukuro_common::RobotUtility > RobotUtilityPtr;
typedef boost::shared_ptr< ::fukuro_common::RobotUtility const> RobotUtilityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::RobotUtility_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::RobotUtility_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::RobotUtility_<ContainerAllocator1> & lhs, const ::fukuro_common::RobotUtility_<ContainerAllocator2> & rhs)
{
  return lhs.ball_engage == rhs.ball_engage &&
    lhs.collision == rhs.collision &&
    lhs.ready_kick == rhs.ready_kick;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::RobotUtility_<ContainerAllocator1> & lhs, const ::fukuro_common::RobotUtility_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::RobotUtility_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::RobotUtility_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::RobotUtility_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::RobotUtility_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::RobotUtility_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::RobotUtility_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::RobotUtility_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06d17b852ebfd0c52f93f85e39a6a1ce";
  }

  static const char* value(const ::fukuro_common::RobotUtility_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06d17b852ebfd0c5ULL;
  static const uint64_t static_value2 = 0x2f93f85e39a6a1ceULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::RobotUtility_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/RobotUtility";
  }

  static const char* value(const ::fukuro_common::RobotUtility_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::RobotUtility_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ball_engage\n"
"bool collision\n"
"bool ready_kick\n"
;
  }

  static const char* value(const ::fukuro_common::RobotUtility_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::RobotUtility_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ball_engage);
      stream.next(m.collision);
      stream.next(m.ready_kick);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotUtility_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::RobotUtility_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::RobotUtility_<ContainerAllocator>& v)
  {
    s << indent << "ball_engage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ball_engage);
    s << indent << "collision: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.collision);
    s << indent << "ready_kick: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ready_kick);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_ROBOTUTILITY_H
