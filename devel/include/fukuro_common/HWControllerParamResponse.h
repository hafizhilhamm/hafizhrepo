// Generated by gencpp from file fukuro_common/HWControllerParamResponse.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_HWCONTROLLERPARAMRESPONSE_H
#define FUKURO_COMMON_MESSAGE_HWCONTROLLERPARAMRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fukuro_common/MotorParameter.h>
#include <fukuro_common/MotorParameter.h>

namespace fukuro_common
{
template <class ContainerAllocator>
struct HWControllerParamResponse_
{
  typedef HWControllerParamResponse_<ContainerAllocator> Type;

  HWControllerParamResponse_()
    : cw()
    , ccw()
    , ok(false)  {
    }
  HWControllerParamResponse_(const ContainerAllocator& _alloc)
    : cw(_alloc)
    , ccw(_alloc)
    , ok(false)  {
  (void)_alloc;
    }



   typedef  ::fukuro_common::MotorParameter_<ContainerAllocator>  _cw_type;
  _cw_type cw;

   typedef  ::fukuro_common::MotorParameter_<ContainerAllocator>  _ccw_type;
  _ccw_type ccw;

   typedef uint8_t _ok_type;
  _ok_type ok;





  typedef boost::shared_ptr< ::fukuro_common::HWControllerParamResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::HWControllerParamResponse_<ContainerAllocator> const> ConstPtr;

}; // struct HWControllerParamResponse_

typedef ::fukuro_common::HWControllerParamResponse_<std::allocator<void> > HWControllerParamResponse;

typedef boost::shared_ptr< ::fukuro_common::HWControllerParamResponse > HWControllerParamResponsePtr;
typedef boost::shared_ptr< ::fukuro_common::HWControllerParamResponse const> HWControllerParamResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::HWControllerParamResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::HWControllerParamResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::HWControllerParamResponse_<ContainerAllocator1> & lhs, const ::fukuro_common::HWControllerParamResponse_<ContainerAllocator2> & rhs)
{
  return lhs.cw == rhs.cw &&
    lhs.ccw == rhs.ccw &&
    lhs.ok == rhs.ok;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::HWControllerParamResponse_<ContainerAllocator1> & lhs, const ::fukuro_common::HWControllerParamResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::HWControllerParamResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::HWControllerParamResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::HWControllerParamResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::HWControllerParamResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::HWControllerParamResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::HWControllerParamResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::HWControllerParamResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff0b5bf0e538bb3b55d6c840655838b7";
  }

  static const char* value(const ::fukuro_common::HWControllerParamResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff0b5bf0e538bb3bULL;
  static const uint64_t static_value2 = 0x55d6c840655838b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::HWControllerParamResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/HWControllerParamResponse";
  }

  static const char* value(const ::fukuro_common::HWControllerParamResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::HWControllerParamResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MotorParameter cw\n"
"MotorParameter ccw\n"
"bool ok\n"
"\n"
"================================================================================\n"
"MSG: fukuro_common/MotorParameter\n"
"int8 n_speed\n"
"float64[] motor1\n"
"float64[] motor2\n"
"float64[] motor3\n"
;
  }

  static const char* value(const ::fukuro_common::HWControllerParamResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::HWControllerParamResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cw);
      stream.next(m.ccw);
      stream.next(m.ok);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HWControllerParamResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::HWControllerParamResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::HWControllerParamResponse_<ContainerAllocator>& v)
  {
    s << indent << "cw: ";
    s << std::endl;
    Printer< ::fukuro_common::MotorParameter_<ContainerAllocator> >::stream(s, indent + "  ", v.cw);
    s << indent << "ccw: ";
    s << std::endl;
    Printer< ::fukuro_common::MotorParameter_<ContainerAllocator> >::stream(s, indent + "  ", v.ccw);
    s << indent << "ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ok);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_HWCONTROLLERPARAMRESPONSE_H
