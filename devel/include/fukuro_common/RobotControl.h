// Generated by gencpp from file fukuro_common/RobotControl.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_ROBOTCONTROL_H
#define FUKURO_COMMON_MESSAGE_ROBOTCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose2D.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace fukuro_common
{
template <class ContainerAllocator>
struct RobotControl_
{
  typedef RobotControl_<ContainerAllocator> Type;

  RobotControl_()
    : target_pose()
    , option()
    , control()
    , dribbler_speed(0.0)
    , plan(false)
    , approach_ball(false)
    , motor_brake(false)
    , absolute_move(false)  {
    }
  RobotControl_(const ContainerAllocator& _alloc)
    : target_pose(_alloc)
    , option(_alloc)
    , control(_alloc)
    , dribbler_speed(0.0)
    , plan(false)
    , approach_ball(false)
    , motor_brake(false)
    , absolute_move(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _target_pose_type;
  _target_pose_type target_pose;

   typedef  ::std_msgs::String_<ContainerAllocator>  _option_type;
  _option_type option;

   typedef  ::std_msgs::String_<ContainerAllocator>  _control_type;
  _control_type control;

   typedef double _dribbler_speed_type;
  _dribbler_speed_type dribbler_speed;

   typedef uint8_t _plan_type;
  _plan_type plan;

   typedef uint8_t _approach_ball_type;
  _approach_ball_type approach_ball;

   typedef uint8_t _motor_brake_type;
  _motor_brake_type motor_brake;

   typedef uint8_t _absolute_move_type;
  _absolute_move_type absolute_move;





  typedef boost::shared_ptr< ::fukuro_common::RobotControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::RobotControl_<ContainerAllocator> const> ConstPtr;

}; // struct RobotControl_

typedef ::fukuro_common::RobotControl_<std::allocator<void> > RobotControl;

typedef boost::shared_ptr< ::fukuro_common::RobotControl > RobotControlPtr;
typedef boost::shared_ptr< ::fukuro_common::RobotControl const> RobotControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::RobotControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::RobotControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::RobotControl_<ContainerAllocator1> & lhs, const ::fukuro_common::RobotControl_<ContainerAllocator2> & rhs)
{
  return lhs.target_pose == rhs.target_pose &&
    lhs.option == rhs.option &&
    lhs.control == rhs.control &&
    lhs.dribbler_speed == rhs.dribbler_speed &&
    lhs.plan == rhs.plan &&
    lhs.approach_ball == rhs.approach_ball &&
    lhs.motor_brake == rhs.motor_brake &&
    lhs.absolute_move == rhs.absolute_move;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::RobotControl_<ContainerAllocator1> & lhs, const ::fukuro_common::RobotControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::RobotControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::RobotControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::RobotControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::RobotControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::RobotControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::RobotControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::RobotControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1cd8f601a5db7d70afbd3196ead46cf";
  }

  static const char* value(const ::fukuro_common::RobotControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1cd8f601a5db7d7ULL;
  static const uint64_t static_value2 = 0x0afbd3196ead46cfULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::RobotControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/RobotControl";
  }

  static const char* value(const ::fukuro_common::RobotControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::RobotControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose2D target_pose\n"
"std_msgs/String option\n"
"std_msgs/String control\n"
"float64 dribbler_speed\n"
"bool plan\n"
"bool approach_ball\n"
"bool motor_brake\n"
"bool absolute_move\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::fukuro_common::RobotControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::RobotControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_pose);
      stream.next(m.option);
      stream.next(m.control);
      stream.next(m.dribbler_speed);
      stream.next(m.plan);
      stream.next(m.approach_ball);
      stream.next(m.motor_brake);
      stream.next(m.absolute_move);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::RobotControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::RobotControl_<ContainerAllocator>& v)
  {
    s << indent << "target_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.target_pose);
    s << indent << "option: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.option);
    s << indent << "control: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.control);
    s << indent << "dribbler_speed: ";
    Printer<double>::stream(s, indent + "  ", v.dribbler_speed);
    s << indent << "plan: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.plan);
    s << indent << "approach_ball: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.approach_ball);
    s << indent << "motor_brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_brake);
    s << indent << "absolute_move: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.absolute_move);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_ROBOTCONTROL_H
