// Generated by gencpp from file fukuro_common/StrategyServiceRequest.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_STRATEGYSERVICEREQUEST_H
#define FUKURO_COMMON_MESSAGE_STRATEGYSERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/Pose2D.h>

namespace fukuro_common
{
template <class ContainerAllocator>
struct StrategyServiceRequest_
{
  typedef StrategyServiceRequest_<ContainerAllocator> Type;

  StrategyServiceRequest_()
    : strategy_state()
    , strategy_option()
    , role()
    , obs1_pos(0)
    , obs2_pos(0)
    , kiper_pos(0)
    , option()
    , home_pos()
    , kick_pos()  {
    }
  StrategyServiceRequest_(const ContainerAllocator& _alloc)
    : strategy_state(_alloc)
    , strategy_option(_alloc)
    , role(_alloc)
    , obs1_pos(0)
    , obs2_pos(0)
    , kiper_pos(0)
    , option(_alloc)
    , home_pos(_alloc)
    , kick_pos(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _strategy_state_type;
  _strategy_state_type strategy_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _strategy_option_type;
  _strategy_option_type strategy_option;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _role_type;
  _role_type role;

   typedef int32_t _obs1_pos_type;
  _obs1_pos_type obs1_pos;

   typedef int32_t _obs2_pos_type;
  _obs2_pos_type obs2_pos;

   typedef int32_t _kiper_pos_type;
  _kiper_pos_type kiper_pos;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _option_type;
  _option_type option;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _home_pos_type;
  _home_pos_type home_pos;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _kick_pos_type;
  _kick_pos_type kick_pos;





  typedef boost::shared_ptr< ::fukuro_common::StrategyServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::StrategyServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StrategyServiceRequest_

typedef ::fukuro_common::StrategyServiceRequest_<std::allocator<void> > StrategyServiceRequest;

typedef boost::shared_ptr< ::fukuro_common::StrategyServiceRequest > StrategyServiceRequestPtr;
typedef boost::shared_ptr< ::fukuro_common::StrategyServiceRequest const> StrategyServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::StrategyServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::StrategyServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::StrategyServiceRequest_<ContainerAllocator1> & lhs, const ::fukuro_common::StrategyServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.strategy_state == rhs.strategy_state &&
    lhs.strategy_option == rhs.strategy_option &&
    lhs.role == rhs.role &&
    lhs.obs1_pos == rhs.obs1_pos &&
    lhs.obs2_pos == rhs.obs2_pos &&
    lhs.kiper_pos == rhs.kiper_pos &&
    lhs.option == rhs.option &&
    lhs.home_pos == rhs.home_pos &&
    lhs.kick_pos == rhs.kick_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::StrategyServiceRequest_<ContainerAllocator1> & lhs, const ::fukuro_common::StrategyServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::StrategyServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::StrategyServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::StrategyServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::StrategyServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::StrategyServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::StrategyServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::StrategyServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36813d2bf1dd74d02dfcbc81194a6945";
  }

  static const char* value(const ::fukuro_common::StrategyServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36813d2bf1dd74d0ULL;
  static const uint64_t static_value2 = 0x2dfcbc81194a6945ULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::StrategyServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/StrategyServiceRequest";
  }

  static const char* value(const ::fukuro_common::StrategyServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::StrategyServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string strategy_state\n"
"string strategy_option\n"
"string role\n"
"int32 obs1_pos\n"
"int32 obs2_pos\n"
"int32 kiper_pos\n"
"string option\n"
"geometry_msgs/Pose2D home_pos\n"
"geometry_msgs/Pose2D kick_pos\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
;
  }

  static const char* value(const ::fukuro_common::StrategyServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::StrategyServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.strategy_state);
      stream.next(m.strategy_option);
      stream.next(m.role);
      stream.next(m.obs1_pos);
      stream.next(m.obs2_pos);
      stream.next(m.kiper_pos);
      stream.next(m.option);
      stream.next(m.home_pos);
      stream.next(m.kick_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StrategyServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::StrategyServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::StrategyServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "strategy_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.strategy_state);
    s << indent << "strategy_option: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.strategy_option);
    s << indent << "role: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.role);
    s << indent << "obs1_pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obs1_pos);
    s << indent << "obs2_pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obs2_pos);
    s << indent << "kiper_pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.kiper_pos);
    s << indent << "option: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.option);
    s << indent << "home_pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.home_pos);
    s << indent << "kick_pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.kick_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_STRATEGYSERVICEREQUEST_H
