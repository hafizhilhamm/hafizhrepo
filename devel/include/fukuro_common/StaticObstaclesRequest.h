// Generated by gencpp from file fukuro_common/StaticObstaclesRequest.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_STATICOBSTACLESREQUEST_H
#define FUKURO_COMMON_MESSAGE_STATICOBSTACLESREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fukuro_common
{
template <class ContainerAllocator>
struct StaticObstaclesRequest_
{
  typedef StaticObstaclesRequest_<ContainerAllocator> Type;

  StaticObstaclesRequest_()
    : obstacle1(false)
    , obstacle2(false)
    , obstacle3(false)
    , obstacle4(false)
    , obstacle5(false)
    , obstacle6(false)
    , obstacle7(false)
    , obstacle8(false)
    , obstacle_kiper(false)  {
    }
  StaticObstaclesRequest_(const ContainerAllocator& _alloc)
    : obstacle1(false)
    , obstacle2(false)
    , obstacle3(false)
    , obstacle4(false)
    , obstacle5(false)
    , obstacle6(false)
    , obstacle7(false)
    , obstacle8(false)
    , obstacle_kiper(false)  {
  (void)_alloc;
    }



   typedef uint8_t _obstacle1_type;
  _obstacle1_type obstacle1;

   typedef uint8_t _obstacle2_type;
  _obstacle2_type obstacle2;

   typedef uint8_t _obstacle3_type;
  _obstacle3_type obstacle3;

   typedef uint8_t _obstacle4_type;
  _obstacle4_type obstacle4;

   typedef uint8_t _obstacle5_type;
  _obstacle5_type obstacle5;

   typedef uint8_t _obstacle6_type;
  _obstacle6_type obstacle6;

   typedef uint8_t _obstacle7_type;
  _obstacle7_type obstacle7;

   typedef uint8_t _obstacle8_type;
  _obstacle8_type obstacle8;

   typedef uint8_t _obstacle_kiper_type;
  _obstacle_kiper_type obstacle_kiper;





  typedef boost::shared_ptr< ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StaticObstaclesRequest_

typedef ::fukuro_common::StaticObstaclesRequest_<std::allocator<void> > StaticObstaclesRequest;

typedef boost::shared_ptr< ::fukuro_common::StaticObstaclesRequest > StaticObstaclesRequestPtr;
typedef boost::shared_ptr< ::fukuro_common::StaticObstaclesRequest const> StaticObstaclesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator1> & lhs, const ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.obstacle1 == rhs.obstacle1 &&
    lhs.obstacle2 == rhs.obstacle2 &&
    lhs.obstacle3 == rhs.obstacle3 &&
    lhs.obstacle4 == rhs.obstacle4 &&
    lhs.obstacle5 == rhs.obstacle5 &&
    lhs.obstacle6 == rhs.obstacle6 &&
    lhs.obstacle7 == rhs.obstacle7 &&
    lhs.obstacle8 == rhs.obstacle8 &&
    lhs.obstacle_kiper == rhs.obstacle_kiper;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator1> & lhs, const ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c73a535d4322a594587f130ce0daad38";
  }

  static const char* value(const ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc73a535d4322a594ULL;
  static const uint64_t static_value2 = 0x587f130ce0daad38ULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/StaticObstaclesRequest";
  }

  static const char* value(const ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool obstacle1\n"
"bool obstacle2\n"
"bool obstacle3\n"
"bool obstacle4\n"
"bool obstacle5\n"
"bool obstacle6\n"
"bool obstacle7\n"
"bool obstacle8\n"
"bool obstacle_kiper\n"
;
  }

  static const char* value(const ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obstacle1);
      stream.next(m.obstacle2);
      stream.next(m.obstacle3);
      stream.next(m.obstacle4);
      stream.next(m.obstacle5);
      stream.next(m.obstacle6);
      stream.next(m.obstacle7);
      stream.next(m.obstacle8);
      stream.next(m.obstacle_kiper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StaticObstaclesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::StaticObstaclesRequest_<ContainerAllocator>& v)
  {
    s << indent << "obstacle1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle1);
    s << indent << "obstacle2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle2);
    s << indent << "obstacle3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle3);
    s << indent << "obstacle4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle4);
    s << indent << "obstacle5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle5);
    s << indent << "obstacle6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle6);
    s << indent << "obstacle7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle7);
    s << indent << "obstacle8: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle8);
    s << indent << "obstacle_kiper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle_kiper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_STATICOBSTACLESREQUEST_H
