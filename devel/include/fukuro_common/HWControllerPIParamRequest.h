// Generated by gencpp from file fukuro_common/HWControllerPIParamRequest.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_HWCONTROLLERPIPARAMREQUEST_H
#define FUKURO_COMMON_MESSAGE_HWCONTROLLERPIPARAMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fukuro_common/MotorParameter.h>

namespace fukuro_common
{
template <class ContainerAllocator>
struct HWControllerPIParamRequest_
{
  typedef HWControllerPIParamRequest_<ContainerAllocator> Type;

  HWControllerPIParamRequest_()
    : k()  {
    }
  HWControllerPIParamRequest_(const ContainerAllocator& _alloc)
    : k(_alloc)  {
  (void)_alloc;
    }



   typedef  ::fukuro_common::MotorParameter_<ContainerAllocator>  _k_type;
  _k_type k;





  typedef boost::shared_ptr< ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator> const> ConstPtr;

}; // struct HWControllerPIParamRequest_

typedef ::fukuro_common::HWControllerPIParamRequest_<std::allocator<void> > HWControllerPIParamRequest;

typedef boost::shared_ptr< ::fukuro_common::HWControllerPIParamRequest > HWControllerPIParamRequestPtr;
typedef boost::shared_ptr< ::fukuro_common::HWControllerPIParamRequest const> HWControllerPIParamRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator1> & lhs, const ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator2> & rhs)
{
  return lhs.k == rhs.k;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator1> & lhs, const ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71a4035fa6895755720b4427569534e6";
  }

  static const char* value(const ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71a4035fa6895755ULL;
  static const uint64_t static_value2 = 0x720b4427569534e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/HWControllerPIParamRequest";
  }

  static const char* value(const ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MotorParameter k\n"
"\n"
"================================================================================\n"
"MSG: fukuro_common/MotorParameter\n"
"int8 n_speed\n"
"float64[] motor1\n"
"float64[] motor2\n"
"float64[] motor3\n"
;
  }

  static const char* value(const ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.k);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HWControllerPIParamRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::HWControllerPIParamRequest_<ContainerAllocator>& v)
  {
    s << indent << "k: ";
    s << std::endl;
    Printer< ::fukuro_common::MotorParameter_<ContainerAllocator> >::stream(s, indent + "  ", v.k);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_HWCONTROLLERPIPARAMREQUEST_H
