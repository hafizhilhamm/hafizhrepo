// Generated by gencpp from file fukuro_common/WorldModel.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_WORLDMODEL_H
#define FUKURO_COMMON_MESSAGE_WORLDMODEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <fukuro_common/Obstacle.h>
#include <fukuro_common/Obstacle.h>
#include <fukuro_common/Obstacle.h>
#include <fukuro_common/Obstacle.h>
#include <fukuro_common/Point2d.h>
#include <fukuro_common/Point2d.h>

namespace fukuro_common
{
template <class ContainerAllocator>
struct WorldModel_
{
  typedef WorldModel_<ContainerAllocator> Type;

  WorldModel_()
    : robot_name()
    , ball_visible(false)
    , obstacle_visible(false)
    , friend_visible(false)
    , available()
    , set_obstacle(false)
    , position()
    , teammates()
    , velocity()
    , local_friend()
    , global_friend()
    , local_ball()
    , global_ball()
    , local_balls()
    , balls()
    , way_points()
    , obstacles()
    , obstacle1()
    , obstacle2()
    , kiper_obstacle()
    , local_obstacles()
    , global_obstacles()  {
    }
  WorldModel_(const ContainerAllocator& _alloc)
    : robot_name(_alloc)
    , ball_visible(false)
    , obstacle_visible(false)
    , friend_visible(false)
    , available(_alloc)
    , set_obstacle(false)
    , position(_alloc)
    , teammates(_alloc)
    , velocity(_alloc)
    , local_friend(_alloc)
    , global_friend(_alloc)
    , local_ball(_alloc)
    , global_ball(_alloc)
    , local_balls(_alloc)
    , balls(_alloc)
    , way_points(_alloc)
    , obstacles(_alloc)
    , obstacle1(_alloc)
    , obstacle2(_alloc)
    , kiper_obstacle(_alloc)
    , local_obstacles(_alloc)
    , global_obstacles(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_name_type;
  _robot_name_type robot_name;

   typedef uint8_t _ball_visible_type;
  _ball_visible_type ball_visible;

   typedef uint8_t _obstacle_visible_type;
  _obstacle_visible_type obstacle_visible;

   typedef uint8_t _friend_visible_type;
  _friend_visible_type friend_visible;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _available_type;
  _available_type available;

   typedef uint8_t _set_obstacle_type;
  _set_obstacle_type set_obstacle;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef std::vector< ::geometry_msgs::Pose2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose2D_<ContainerAllocator> >::other >  _teammates_type;
  _teammates_type teammates;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _local_friend_type;
  _local_friend_type local_friend;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _global_friend_type;
  _global_friend_type global_friend;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _local_ball_type;
  _local_ball_type local_ball;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _global_ball_type;
  _global_ball_type global_ball;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _local_balls_type;
  _local_balls_type local_balls;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _balls_type;
  _balls_type balls;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _way_points_type;
  _way_points_type way_points;

   typedef std::vector< ::fukuro_common::Obstacle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fukuro_common::Obstacle_<ContainerAllocator> >::other >  _obstacles_type;
  _obstacles_type obstacles;

   typedef  ::fukuro_common::Obstacle_<ContainerAllocator>  _obstacle1_type;
  _obstacle1_type obstacle1;

   typedef  ::fukuro_common::Obstacle_<ContainerAllocator>  _obstacle2_type;
  _obstacle2_type obstacle2;

   typedef  ::fukuro_common::Obstacle_<ContainerAllocator>  _kiper_obstacle_type;
  _kiper_obstacle_type kiper_obstacle;

   typedef std::vector< ::fukuro_common::Point2d_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fukuro_common::Point2d_<ContainerAllocator> >::other >  _local_obstacles_type;
  _local_obstacles_type local_obstacles;

   typedef std::vector< ::fukuro_common::Point2d_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fukuro_common::Point2d_<ContainerAllocator> >::other >  _global_obstacles_type;
  _global_obstacles_type global_obstacles;





  typedef boost::shared_ptr< ::fukuro_common::WorldModel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::WorldModel_<ContainerAllocator> const> ConstPtr;

}; // struct WorldModel_

typedef ::fukuro_common::WorldModel_<std::allocator<void> > WorldModel;

typedef boost::shared_ptr< ::fukuro_common::WorldModel > WorldModelPtr;
typedef boost::shared_ptr< ::fukuro_common::WorldModel const> WorldModelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::WorldModel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::WorldModel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::WorldModel_<ContainerAllocator1> & lhs, const ::fukuro_common::WorldModel_<ContainerAllocator2> & rhs)
{
  return lhs.robot_name == rhs.robot_name &&
    lhs.ball_visible == rhs.ball_visible &&
    lhs.obstacle_visible == rhs.obstacle_visible &&
    lhs.friend_visible == rhs.friend_visible &&
    lhs.available == rhs.available &&
    lhs.set_obstacle == rhs.set_obstacle &&
    lhs.position == rhs.position &&
    lhs.teammates == rhs.teammates &&
    lhs.velocity == rhs.velocity &&
    lhs.local_friend == rhs.local_friend &&
    lhs.global_friend == rhs.global_friend &&
    lhs.local_ball == rhs.local_ball &&
    lhs.global_ball == rhs.global_ball &&
    lhs.local_balls == rhs.local_balls &&
    lhs.balls == rhs.balls &&
    lhs.way_points == rhs.way_points &&
    lhs.obstacles == rhs.obstacles &&
    lhs.obstacle1 == rhs.obstacle1 &&
    lhs.obstacle2 == rhs.obstacle2 &&
    lhs.kiper_obstacle == rhs.kiper_obstacle &&
    lhs.local_obstacles == rhs.local_obstacles &&
    lhs.global_obstacles == rhs.global_obstacles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::WorldModel_<ContainerAllocator1> & lhs, const ::fukuro_common::WorldModel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::WorldModel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::WorldModel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::WorldModel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::WorldModel_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::WorldModel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::WorldModel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::WorldModel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83b86ec7340f012e81177e9324633119";
  }

  static const char* value(const ::fukuro_common::WorldModel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83b86ec7340f012eULL;
  static const uint64_t static_value2 = 0x81177e9324633119ULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::WorldModel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/WorldModel";
  }

  static const char* value(const ::fukuro_common::WorldModel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::WorldModel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robot_name\n"
"bool ball_visible\n"
"bool obstacle_visible\n"
"bool friend_visible\n"
"bool[] available\n"
"bool set_obstacle # untuk lomba online\n"
"geometry_msgs/Pose2D position\n"
"geometry_msgs/Pose2D[] teammates\n"
"geometry_msgs/Pose2D velocity\n"
"geometry_msgs/Point local_friend\n"
"geometry_msgs/Point global_friend\n"
"geometry_msgs/Point local_ball\n"
"geometry_msgs/Point global_ball\n"
"geometry_msgs/Point[] local_balls\n"
"geometry_msgs/Point[] balls\n"
"geometry_msgs/Point[] way_points\n"
"Obstacle[] obstacles\n"
"Obstacle obstacle1   # untuk lomba online\n"
"Obstacle obstacle2   # untuk lomba online\n"
"Obstacle kiper_obstacle # untuk lomba online\n"
"Point2d[] local_obstacles\n"
"Point2d[] global_obstacles\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: fukuro_common/Obstacle\n"
"Point2d pos\n"
"float64 r\n"
"int8 shape\n"
"================================================================================\n"
"MSG: fukuro_common/Point2d\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::fukuro_common::WorldModel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::WorldModel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_name);
      stream.next(m.ball_visible);
      stream.next(m.obstacle_visible);
      stream.next(m.friend_visible);
      stream.next(m.available);
      stream.next(m.set_obstacle);
      stream.next(m.position);
      stream.next(m.teammates);
      stream.next(m.velocity);
      stream.next(m.local_friend);
      stream.next(m.global_friend);
      stream.next(m.local_ball);
      stream.next(m.global_ball);
      stream.next(m.local_balls);
      stream.next(m.balls);
      stream.next(m.way_points);
      stream.next(m.obstacles);
      stream.next(m.obstacle1);
      stream.next(m.obstacle2);
      stream.next(m.kiper_obstacle);
      stream.next(m.local_obstacles);
      stream.next(m.global_obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorldModel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::WorldModel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::WorldModel_<ContainerAllocator>& v)
  {
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_name);
    s << indent << "ball_visible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ball_visible);
    s << indent << "obstacle_visible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle_visible);
    s << indent << "friend_visible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.friend_visible);
    s << indent << "available[]" << std::endl;
    for (size_t i = 0; i < v.available.size(); ++i)
    {
      s << indent << "  available[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.available[i]);
    }
    s << indent << "set_obstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_obstacle);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "teammates[]" << std::endl;
    for (size_t i = 0; i < v.teammates.size(); ++i)
    {
      s << indent << "  teammates[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "    ", v.teammates[i]);
    }
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "local_friend: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.local_friend);
    s << indent << "global_friend: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.global_friend);
    s << indent << "local_ball: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.local_ball);
    s << indent << "global_ball: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.global_ball);
    s << indent << "local_balls[]" << std::endl;
    for (size_t i = 0; i < v.local_balls.size(); ++i)
    {
      s << indent << "  local_balls[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.local_balls[i]);
    }
    s << indent << "balls[]" << std::endl;
    for (size_t i = 0; i < v.balls.size(); ++i)
    {
      s << indent << "  balls[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.balls[i]);
    }
    s << indent << "way_points[]" << std::endl;
    for (size_t i = 0; i < v.way_points.size(); ++i)
    {
      s << indent << "  way_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.way_points[i]);
    }
    s << indent << "obstacles[]" << std::endl;
    for (size_t i = 0; i < v.obstacles.size(); ++i)
    {
      s << indent << "  obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fukuro_common::Obstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacles[i]);
    }
    s << indent << "obstacle1: ";
    s << std::endl;
    Printer< ::fukuro_common::Obstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle1);
    s << indent << "obstacle2: ";
    s << std::endl;
    Printer< ::fukuro_common::Obstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle2);
    s << indent << "kiper_obstacle: ";
    s << std::endl;
    Printer< ::fukuro_common::Obstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.kiper_obstacle);
    s << indent << "local_obstacles[]" << std::endl;
    for (size_t i = 0; i < v.local_obstacles.size(); ++i)
    {
      s << indent << "  local_obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fukuro_common::Point2d_<ContainerAllocator> >::stream(s, indent + "    ", v.local_obstacles[i]);
    }
    s << indent << "global_obstacles[]" << std::endl;
    for (size_t i = 0; i < v.global_obstacles.size(); ++i)
    {
      s << indent << "  global_obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fukuro_common::Point2d_<ContainerAllocator> >::stream(s, indent + "    ", v.global_obstacles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_WORLDMODEL_H
