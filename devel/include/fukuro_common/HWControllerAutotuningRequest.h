// Generated by gencpp from file fukuro_common/HWControllerAutotuningRequest.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_HWCONTROLLERAUTOTUNINGREQUEST_H
#define FUKURO_COMMON_MESSAGE_HWCONTROLLERAUTOTUNINGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fukuro_common
{
template <class ContainerAllocator>
struct HWControllerAutotuningRequest_
{
  typedef HWControllerAutotuningRequest_<ContainerAllocator> Type;

  HWControllerAutotuningRequest_()
    : setpoint(0.0)  {
    }
  HWControllerAutotuningRequest_(const ContainerAllocator& _alloc)
    : setpoint(0.0)  {
  (void)_alloc;
    }



   typedef double _setpoint_type;
  _setpoint_type setpoint;





  typedef boost::shared_ptr< ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator> const> ConstPtr;

}; // struct HWControllerAutotuningRequest_

typedef ::fukuro_common::HWControllerAutotuningRequest_<std::allocator<void> > HWControllerAutotuningRequest;

typedef boost::shared_ptr< ::fukuro_common::HWControllerAutotuningRequest > HWControllerAutotuningRequestPtr;
typedef boost::shared_ptr< ::fukuro_common::HWControllerAutotuningRequest const> HWControllerAutotuningRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator1> & lhs, const ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator2> & rhs)
{
  return lhs.setpoint == rhs.setpoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator1> & lhs, const ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a299d01e21b4327e6da9991f27e5d62";
  }

  static const char* value(const ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a299d01e21b4327ULL;
  static const uint64_t static_value2 = 0xe6da9991f27e5d62ULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/HWControllerAutotuningRequest";
  }

  static const char* value(const ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 setpoint\n"
;
  }

  static const char* value(const ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.setpoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HWControllerAutotuningRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::HWControllerAutotuningRequest_<ContainerAllocator>& v)
  {
    s << indent << "setpoint: ";
    Printer<double>::stream(s, indent + "  ", v.setpoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_HWCONTROLLERAUTOTUNINGREQUEST_H
