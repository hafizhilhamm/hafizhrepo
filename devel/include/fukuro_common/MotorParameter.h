// Generated by gencpp from file fukuro_common/MotorParameter.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_MOTORPARAMETER_H
#define FUKURO_COMMON_MESSAGE_MOTORPARAMETER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fukuro_common
{
template <class ContainerAllocator>
struct MotorParameter_
{
  typedef MotorParameter_<ContainerAllocator> Type;

  MotorParameter_()
    : n_speed(0)
    , motor1()
    , motor2()
    , motor3()  {
    }
  MotorParameter_(const ContainerAllocator& _alloc)
    : n_speed(0)
    , motor1(_alloc)
    , motor2(_alloc)
    , motor3(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _n_speed_type;
  _n_speed_type n_speed;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _motor1_type;
  _motor1_type motor1;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _motor2_type;
  _motor2_type motor2;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _motor3_type;
  _motor3_type motor3;





  typedef boost::shared_ptr< ::fukuro_common::MotorParameter_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::MotorParameter_<ContainerAllocator> const> ConstPtr;

}; // struct MotorParameter_

typedef ::fukuro_common::MotorParameter_<std::allocator<void> > MotorParameter;

typedef boost::shared_ptr< ::fukuro_common::MotorParameter > MotorParameterPtr;
typedef boost::shared_ptr< ::fukuro_common::MotorParameter const> MotorParameterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::MotorParameter_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::MotorParameter_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::MotorParameter_<ContainerAllocator1> & lhs, const ::fukuro_common::MotorParameter_<ContainerAllocator2> & rhs)
{
  return lhs.n_speed == rhs.n_speed &&
    lhs.motor1 == rhs.motor1 &&
    lhs.motor2 == rhs.motor2 &&
    lhs.motor3 == rhs.motor3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::MotorParameter_<ContainerAllocator1> & lhs, const ::fukuro_common::MotorParameter_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::MotorParameter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::MotorParameter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::MotorParameter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::MotorParameter_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::MotorParameter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::MotorParameter_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::MotorParameter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8645ce99acc3de9f5817e6d22e97aae7";
  }

  static const char* value(const ::fukuro_common::MotorParameter_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8645ce99acc3de9fULL;
  static const uint64_t static_value2 = 0x5817e6d22e97aae7ULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::MotorParameter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/MotorParameter";
  }

  static const char* value(const ::fukuro_common::MotorParameter_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::MotorParameter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 n_speed\n"
"float64[] motor1\n"
"float64[] motor2\n"
"float64[] motor3\n"
;
  }

  static const char* value(const ::fukuro_common::MotorParameter_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::MotorParameter_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.n_speed);
      stream.next(m.motor1);
      stream.next(m.motor2);
      stream.next(m.motor3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorParameter_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::MotorParameter_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::MotorParameter_<ContainerAllocator>& v)
  {
    s << indent << "n_speed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.n_speed);
    s << indent << "motor1[]" << std::endl;
    for (size_t i = 0; i < v.motor1.size(); ++i)
    {
      s << indent << "  motor1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.motor1[i]);
    }
    s << indent << "motor2[]" << std::endl;
    for (size_t i = 0; i < v.motor2.size(); ++i)
    {
      s << indent << "  motor2[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.motor2[i]);
    }
    s << indent << "motor3[]" << std::endl;
    for (size_t i = 0; i < v.motor3.size(); ++i)
    {
      s << indent << "  motor3[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.motor3[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_MOTORPARAMETER_H
