// Generated by gencpp from file fukuro_common/StaticObstacle.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_STATICOBSTACLE_H
#define FUKURO_COMMON_MESSAGE_STATICOBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fukuro_common/Obstacle.h>
#include <fukuro_common/Obstacle.h>
#include <fukuro_common/Obstacle.h>
#include <fukuro_common/Obstacle.h>
#include <fukuro_common/Obstacle.h>
#include <fukuro_common/Obstacle.h>
#include <fukuro_common/Obstacle.h>
#include <fukuro_common/Obstacle.h>

namespace fukuro_common
{
template <class ContainerAllocator>
struct StaticObstacle_
{
  typedef StaticObstacle_<ContainerAllocator> Type;

  StaticObstacle_()
    : obstacle1()
    , obstacle2()
    , obstacle3()
    , obstacle4()
    , obstacle5()
    , obstacle6()
    , obstacle7()
    , obstacle8()  {
    }
  StaticObstacle_(const ContainerAllocator& _alloc)
    : obstacle1(_alloc)
    , obstacle2(_alloc)
    , obstacle3(_alloc)
    , obstacle4(_alloc)
    , obstacle5(_alloc)
    , obstacle6(_alloc)
    , obstacle7(_alloc)
    , obstacle8(_alloc)  {
  (void)_alloc;
    }



   typedef  ::fukuro_common::Obstacle_<ContainerAllocator>  _obstacle1_type;
  _obstacle1_type obstacle1;

   typedef  ::fukuro_common::Obstacle_<ContainerAllocator>  _obstacle2_type;
  _obstacle2_type obstacle2;

   typedef  ::fukuro_common::Obstacle_<ContainerAllocator>  _obstacle3_type;
  _obstacle3_type obstacle3;

   typedef  ::fukuro_common::Obstacle_<ContainerAllocator>  _obstacle4_type;
  _obstacle4_type obstacle4;

   typedef  ::fukuro_common::Obstacle_<ContainerAllocator>  _obstacle5_type;
  _obstacle5_type obstacle5;

   typedef  ::fukuro_common::Obstacle_<ContainerAllocator>  _obstacle6_type;
  _obstacle6_type obstacle6;

   typedef  ::fukuro_common::Obstacle_<ContainerAllocator>  _obstacle7_type;
  _obstacle7_type obstacle7;

   typedef  ::fukuro_common::Obstacle_<ContainerAllocator>  _obstacle8_type;
  _obstacle8_type obstacle8;





  typedef boost::shared_ptr< ::fukuro_common::StaticObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::StaticObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct StaticObstacle_

typedef ::fukuro_common::StaticObstacle_<std::allocator<void> > StaticObstacle;

typedef boost::shared_ptr< ::fukuro_common::StaticObstacle > StaticObstaclePtr;
typedef boost::shared_ptr< ::fukuro_common::StaticObstacle const> StaticObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::StaticObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::StaticObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::StaticObstacle_<ContainerAllocator1> & lhs, const ::fukuro_common::StaticObstacle_<ContainerAllocator2> & rhs)
{
  return lhs.obstacle1 == rhs.obstacle1 &&
    lhs.obstacle2 == rhs.obstacle2 &&
    lhs.obstacle3 == rhs.obstacle3 &&
    lhs.obstacle4 == rhs.obstacle4 &&
    lhs.obstacle5 == rhs.obstacle5 &&
    lhs.obstacle6 == rhs.obstacle6 &&
    lhs.obstacle7 == rhs.obstacle7 &&
    lhs.obstacle8 == rhs.obstacle8;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::StaticObstacle_<ContainerAllocator1> & lhs, const ::fukuro_common::StaticObstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::StaticObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::StaticObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::StaticObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::StaticObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::StaticObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::StaticObstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::StaticObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46d3fb587aed8a021e47dcb530b200ee";
  }

  static const char* value(const ::fukuro_common::StaticObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46d3fb587aed8a02ULL;
  static const uint64_t static_value2 = 0x1e47dcb530b200eeULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::StaticObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/StaticObstacle";
  }

  static const char* value(const ::fukuro_common::StaticObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::StaticObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Obstacle obstacle1\n"
"Obstacle obstacle2\n"
"Obstacle obstacle3\n"
"Obstacle obstacle4\n"
"Obstacle obstacle5\n"
"Obstacle obstacle6\n"
"Obstacle obstacle7\n"
"Obstacle obstacle8\n"
"================================================================================\n"
"MSG: fukuro_common/Obstacle\n"
"Point2d pos\n"
"float64 r\n"
"int8 shape\n"
"================================================================================\n"
"MSG: fukuro_common/Point2d\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::fukuro_common::StaticObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::StaticObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obstacle1);
      stream.next(m.obstacle2);
      stream.next(m.obstacle3);
      stream.next(m.obstacle4);
      stream.next(m.obstacle5);
      stream.next(m.obstacle6);
      stream.next(m.obstacle7);
      stream.next(m.obstacle8);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StaticObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::StaticObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::StaticObstacle_<ContainerAllocator>& v)
  {
    s << indent << "obstacle1: ";
    s << std::endl;
    Printer< ::fukuro_common::Obstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle1);
    s << indent << "obstacle2: ";
    s << std::endl;
    Printer< ::fukuro_common::Obstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle2);
    s << indent << "obstacle3: ";
    s << std::endl;
    Printer< ::fukuro_common::Obstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle3);
    s << indent << "obstacle4: ";
    s << std::endl;
    Printer< ::fukuro_common::Obstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle4);
    s << indent << "obstacle5: ";
    s << std::endl;
    Printer< ::fukuro_common::Obstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle5);
    s << indent << "obstacle6: ";
    s << std::endl;
    Printer< ::fukuro_common::Obstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle6);
    s << indent << "obstacle7: ";
    s << std::endl;
    Printer< ::fukuro_common::Obstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle7);
    s << indent << "obstacle8: ";
    s << std::endl;
    Printer< ::fukuro_common::Obstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle8);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_STATICOBSTACLE_H
