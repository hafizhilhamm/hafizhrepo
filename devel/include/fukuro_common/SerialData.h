// Generated by gencpp from file fukuro_common/SerialData.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_SERIALDATA_H
#define FUKURO_COMMON_MESSAGE_SERIALDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fukuro_common/MotorVel.h>
#include <fukuro_common/DribblerControl.h>

namespace fukuro_common
{
template <class ContainerAllocator>
struct SerialData_
{
  typedef SerialData_<ContainerAllocator> Type;

  SerialData_()
    : motor()
    , kecepatan()
    , motor_brake(false)
    , kick(0)  {
    }
  SerialData_(const ContainerAllocator& _alloc)
    : motor(_alloc)
    , kecepatan(_alloc)
    , motor_brake(false)
    , kick(0)  {
  (void)_alloc;
    }



   typedef  ::fukuro_common::MotorVel_<ContainerAllocator>  _motor_type;
  _motor_type motor;

   typedef  ::fukuro_common::DribblerControl_<ContainerAllocator>  _kecepatan_type;
  _kecepatan_type kecepatan;

   typedef uint8_t _motor_brake_type;
  _motor_brake_type motor_brake;

   typedef int8_t _kick_type;
  _kick_type kick;





  typedef boost::shared_ptr< ::fukuro_common::SerialData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::SerialData_<ContainerAllocator> const> ConstPtr;

}; // struct SerialData_

typedef ::fukuro_common::SerialData_<std::allocator<void> > SerialData;

typedef boost::shared_ptr< ::fukuro_common::SerialData > SerialDataPtr;
typedef boost::shared_ptr< ::fukuro_common::SerialData const> SerialDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::SerialData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::SerialData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::SerialData_<ContainerAllocator1> & lhs, const ::fukuro_common::SerialData_<ContainerAllocator2> & rhs)
{
  return lhs.motor == rhs.motor &&
    lhs.kecepatan == rhs.kecepatan &&
    lhs.motor_brake == rhs.motor_brake &&
    lhs.kick == rhs.kick;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::SerialData_<ContainerAllocator1> & lhs, const ::fukuro_common::SerialData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::SerialData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::SerialData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::SerialData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::SerialData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::SerialData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::SerialData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::SerialData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e79ea646426556a7d54f50fe79c0de3f";
  }

  static const char* value(const ::fukuro_common::SerialData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe79ea646426556a7ULL;
  static const uint64_t static_value2 = 0xd54f50fe79c0de3fULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::SerialData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/SerialData";
  }

  static const char* value(const ::fukuro_common::SerialData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::SerialData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MotorVel motor\n"
"DribblerControl kecepatan\n"
"bool motor_brake\n"
"int8 kick\n"
"================================================================================\n"
"MSG: fukuro_common/MotorVel\n"
"float32 m1\n"
"float32 m2\n"
"float32 m3\n"
"================================================================================\n"
"MSG: fukuro_common/DribblerControl\n"
"uint8 dir_in\n"
"float32 speed\n"
;
  }

  static const char* value(const ::fukuro_common::SerialData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::SerialData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor);
      stream.next(m.kecepatan);
      stream.next(m.motor_brake);
      stream.next(m.kick);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SerialData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::SerialData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::SerialData_<ContainerAllocator>& v)
  {
    s << indent << "motor: ";
    s << std::endl;
    Printer< ::fukuro_common::MotorVel_<ContainerAllocator> >::stream(s, indent + "  ", v.motor);
    s << indent << "kecepatan: ";
    s << std::endl;
    Printer< ::fukuro_common::DribblerControl_<ContainerAllocator> >::stream(s, indent + "  ", v.kecepatan);
    s << indent << "motor_brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_brake);
    s << indent << "kick: ";
    Printer<int8_t>::stream(s, indent + "  ", v.kick);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_SERIALDATA_H
