// Generated by gencpp from file fukuro_common/StrategyInfo.msg
// DO NOT EDIT!


#ifndef FUKURO_COMMON_MESSAGE_STRATEGYINFO_H
#define FUKURO_COMMON_MESSAGE_STRATEGYINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fukuro_common
{
template <class ContainerAllocator>
struct StrategyInfo_
{
  typedef StrategyInfo_<ContainerAllocator> Type;

  StrategyInfo_()
    : strategy_state()
    , role()
    , option()
    , ball_passed(false)
    , ready_receive(false)  {
    }
  StrategyInfo_(const ContainerAllocator& _alloc)
    : strategy_state(_alloc)
    , role(_alloc)
    , option(_alloc)
    , ball_passed(false)
    , ready_receive(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _strategy_state_type;
  _strategy_state_type strategy_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _role_type;
  _role_type role;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _option_type;
  _option_type option;

   typedef uint8_t _ball_passed_type;
  _ball_passed_type ball_passed;

   typedef uint8_t _ready_receive_type;
  _ready_receive_type ready_receive;





  typedef boost::shared_ptr< ::fukuro_common::StrategyInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fukuro_common::StrategyInfo_<ContainerAllocator> const> ConstPtr;

}; // struct StrategyInfo_

typedef ::fukuro_common::StrategyInfo_<std::allocator<void> > StrategyInfo;

typedef boost::shared_ptr< ::fukuro_common::StrategyInfo > StrategyInfoPtr;
typedef boost::shared_ptr< ::fukuro_common::StrategyInfo const> StrategyInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fukuro_common::StrategyInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fukuro_common::StrategyInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fukuro_common::StrategyInfo_<ContainerAllocator1> & lhs, const ::fukuro_common::StrategyInfo_<ContainerAllocator2> & rhs)
{
  return lhs.strategy_state == rhs.strategy_state &&
    lhs.role == rhs.role &&
    lhs.option == rhs.option &&
    lhs.ball_passed == rhs.ball_passed &&
    lhs.ready_receive == rhs.ready_receive;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fukuro_common::StrategyInfo_<ContainerAllocator1> & lhs, const ::fukuro_common::StrategyInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fukuro_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::StrategyInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fukuro_common::StrategyInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::StrategyInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fukuro_common::StrategyInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::StrategyInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fukuro_common::StrategyInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fukuro_common::StrategyInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b91c76e9e4337807ddef2cd407b15d2a";
  }

  static const char* value(const ::fukuro_common::StrategyInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb91c76e9e4337807ULL;
  static const uint64_t static_value2 = 0xddef2cd407b15d2aULL;
};

template<class ContainerAllocator>
struct DataType< ::fukuro_common::StrategyInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fukuro_common/StrategyInfo";
  }

  static const char* value(const ::fukuro_common::StrategyInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fukuro_common::StrategyInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string strategy_state\n"
"string role\n"
"string option\n"
"bool ball_passed\n"
"bool ready_receive\n"
;
  }

  static const char* value(const ::fukuro_common::StrategyInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fukuro_common::StrategyInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.strategy_state);
      stream.next(m.role);
      stream.next(m.option);
      stream.next(m.ball_passed);
      stream.next(m.ready_receive);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StrategyInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fukuro_common::StrategyInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fukuro_common::StrategyInfo_<ContainerAllocator>& v)
  {
    s << indent << "strategy_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.strategy_state);
    s << indent << "role: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.role);
    s << indent << "option: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.option);
    s << indent << "ball_passed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ball_passed);
    s << indent << "ready_receive: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ready_receive);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUKURO_COMMON_MESSAGE_STRATEGYINFO_H
