// Generated by gencpp from file controller/PWM.msg
// DO NOT EDIT!


#ifndef CONTROLLER_MESSAGE_PWM_H
#define CONTROLLER_MESSAGE_PWM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controller
{
template <class ContainerAllocator>
struct PWM_
{
  typedef PWM_<ContainerAllocator> Type;

  PWM_()
    : m1(0.0)
    , m2(0.0)
    , m3(0.0)  {
    }
  PWM_(const ContainerAllocator& _alloc)
    : m1(0.0)
    , m2(0.0)
    , m3(0.0)  {
  (void)_alloc;
    }



   typedef double _m1_type;
  _m1_type m1;

   typedef double _m2_type;
  _m2_type m2;

   typedef double _m3_type;
  _m3_type m3;





  typedef boost::shared_ptr< ::controller::PWM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller::PWM_<ContainerAllocator> const> ConstPtr;

}; // struct PWM_

typedef ::controller::PWM_<std::allocator<void> > PWM;

typedef boost::shared_ptr< ::controller::PWM > PWMPtr;
typedef boost::shared_ptr< ::controller::PWM const> PWMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller::PWM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller::PWM_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::controller::PWM_<ContainerAllocator1> & lhs, const ::controller::PWM_<ContainerAllocator2> & rhs)
{
  return lhs.m1 == rhs.m1 &&
    lhs.m2 == rhs.m2 &&
    lhs.m3 == rhs.m3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::controller::PWM_<ContainerAllocator1> & lhs, const ::controller::PWM_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::controller::PWM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller::PWM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller::PWM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller::PWM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::PWM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::PWM_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller::PWM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f38f746e36007dc479eedf12d9cd9dbc";
  }

  static const char* value(const ::controller::PWM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf38f746e36007dc4ULL;
  static const uint64_t static_value2 = 0x79eedf12d9cd9dbcULL;
};

template<class ContainerAllocator>
struct DataType< ::controller::PWM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller/PWM";
  }

  static const char* value(const ::controller::PWM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller::PWM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 m1\n"
"float64 m2\n"
"float64 m3\n"
;
  }

  static const char* value(const ::controller::PWM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller::PWM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.m1);
      stream.next(m.m2);
      stream.next(m.m3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PWM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller::PWM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller::PWM_<ContainerAllocator>& v)
  {
    s << indent << "m1: ";
    Printer<double>::stream(s, indent + "  ", v.m1);
    s << indent << "m2: ";
    Printer<double>::stream(s, indent + "  ", v.m2);
    s << indent << "m3: ";
    Printer<double>::stream(s, indent + "  ", v.m3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_MESSAGE_PWM_H
