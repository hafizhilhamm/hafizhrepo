# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fukuro_common/OmnivisionInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fukuro_common.msg

class OmnivisionInfo(genpy.Message):
  _md5sum = "fba85346654e08337110412dda45e35e"
  _type = "fukuro_common/OmnivisionInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Point2d local_ball
bool ball_visible
Point2d local_obstacle
bool obs_visible
Point2d robot_friend_pos
bool friend_visible
================================================================================
MSG: fukuro_common/Point2d
float64 x
float64 y"""
  __slots__ = ['local_ball','ball_visible','local_obstacle','obs_visible','robot_friend_pos','friend_visible']
  _slot_types = ['fukuro_common/Point2d','bool','fukuro_common/Point2d','bool','fukuro_common/Point2d','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       local_ball,ball_visible,local_obstacle,obs_visible,robot_friend_pos,friend_visible

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OmnivisionInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.local_ball is None:
        self.local_ball = fukuro_common.msg.Point2d()
      if self.ball_visible is None:
        self.ball_visible = False
      if self.local_obstacle is None:
        self.local_obstacle = fukuro_common.msg.Point2d()
      if self.obs_visible is None:
        self.obs_visible = False
      if self.robot_friend_pos is None:
        self.robot_friend_pos = fukuro_common.msg.Point2d()
      if self.friend_visible is None:
        self.friend_visible = False
    else:
      self.local_ball = fukuro_common.msg.Point2d()
      self.ball_visible = False
      self.local_obstacle = fukuro_common.msg.Point2d()
      self.obs_visible = False
      self.robot_friend_pos = fukuro_common.msg.Point2d()
      self.friend_visible = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2dB2dB2dB().pack(_x.local_ball.x, _x.local_ball.y, _x.ball_visible, _x.local_obstacle.x, _x.local_obstacle.y, _x.obs_visible, _x.robot_friend_pos.x, _x.robot_friend_pos.y, _x.friend_visible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.local_ball is None:
        self.local_ball = fukuro_common.msg.Point2d()
      if self.local_obstacle is None:
        self.local_obstacle = fukuro_common.msg.Point2d()
      if self.robot_friend_pos is None:
        self.robot_friend_pos = fukuro_common.msg.Point2d()
      end = 0
      _x = self
      start = end
      end += 51
      (_x.local_ball.x, _x.local_ball.y, _x.ball_visible, _x.local_obstacle.x, _x.local_obstacle.y, _x.obs_visible, _x.robot_friend_pos.x, _x.robot_friend_pos.y, _x.friend_visible,) = _get_struct_2dB2dB2dB().unpack(str[start:end])
      self.ball_visible = bool(self.ball_visible)
      self.obs_visible = bool(self.obs_visible)
      self.friend_visible = bool(self.friend_visible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2dB2dB2dB().pack(_x.local_ball.x, _x.local_ball.y, _x.ball_visible, _x.local_obstacle.x, _x.local_obstacle.y, _x.obs_visible, _x.robot_friend_pos.x, _x.robot_friend_pos.y, _x.friend_visible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.local_ball is None:
        self.local_ball = fukuro_common.msg.Point2d()
      if self.local_obstacle is None:
        self.local_obstacle = fukuro_common.msg.Point2d()
      if self.robot_friend_pos is None:
        self.robot_friend_pos = fukuro_common.msg.Point2d()
      end = 0
      _x = self
      start = end
      end += 51
      (_x.local_ball.x, _x.local_ball.y, _x.ball_visible, _x.local_obstacle.x, _x.local_obstacle.y, _x.obs_visible, _x.robot_friend_pos.x, _x.robot_friend_pos.y, _x.friend_visible,) = _get_struct_2dB2dB2dB().unpack(str[start:end])
      self.ball_visible = bool(self.ball_visible)
      self.obs_visible = bool(self.obs_visible)
      self.friend_visible = bool(self.friend_visible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2dB2dB2dB = None
def _get_struct_2dB2dB2dB():
    global _struct_2dB2dB2dB
    if _struct_2dB2dB2dB is None:
        _struct_2dB2dB2dB = struct.Struct("<2dB2dB2dB")
    return _struct_2dB2dB2dB
