# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fukuro_common/PathPlan.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fukuro_common.msg

class PathPlan(genpy.Message):
  _md5sum = "bac9c86aba64a149e610ac3cafcaef0c"
  _type = "fukuro_common/PathPlan"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Point2d[] obstacles
Point2d[] solutions
Point2d start
Point2d goal
float64 search_time
bool solved
bool updated
================================================================================
MSG: fukuro_common/Point2d
float64 x
float64 y"""
  __slots__ = ['obstacles','solutions','start','goal','search_time','solved','updated']
  _slot_types = ['fukuro_common/Point2d[]','fukuro_common/Point2d[]','fukuro_common/Point2d','fukuro_common/Point2d','float64','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obstacles,solutions,start,goal,search_time,solved,updated

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathPlan, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.obstacles is None:
        self.obstacles = []
      if self.solutions is None:
        self.solutions = []
      if self.start is None:
        self.start = fukuro_common.msg.Point2d()
      if self.goal is None:
        self.goal = fukuro_common.msg.Point2d()
      if self.search_time is None:
        self.search_time = 0.
      if self.solved is None:
        self.solved = False
      if self.updated is None:
        self.updated = False
    else:
      self.obstacles = []
      self.solutions = []
      self.start = fukuro_common.msg.Point2d()
      self.goal = fukuro_common.msg.Point2d()
      self.search_time = 0.
      self.solved = False
      self.updated = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.solutions)
      buff.write(_struct_I.pack(length))
      for val1 in self.solutions:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_5d2B().pack(_x.start.x, _x.start.y, _x.goal.x, _x.goal.y, _x.search_time, _x.solved, _x.updated))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obstacles is None:
        self.obstacles = None
      if self.solutions is None:
        self.solutions = None
      if self.start is None:
        self.start = fukuro_common.msg.Point2d()
      if self.goal is None:
        self.goal = fukuro_common.msg.Point2d()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles = []
      for i in range(0, length):
        val1 = fukuro_common.msg.Point2d()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.obstacles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solutions = []
      for i in range(0, length):
        val1 = fukuro_common.msg.Point2d()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.solutions.append(val1)
      _x = self
      start = end
      end += 42
      (_x.start.x, _x.start.y, _x.goal.x, _x.goal.y, _x.search_time, _x.solved, _x.updated,) = _get_struct_5d2B().unpack(str[start:end])
      self.solved = bool(self.solved)
      self.updated = bool(self.updated)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.solutions)
      buff.write(_struct_I.pack(length))
      for val1 in self.solutions:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
      _x = self
      buff.write(_get_struct_5d2B().pack(_x.start.x, _x.start.y, _x.goal.x, _x.goal.y, _x.search_time, _x.solved, _x.updated))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obstacles is None:
        self.obstacles = None
      if self.solutions is None:
        self.solutions = None
      if self.start is None:
        self.start = fukuro_common.msg.Point2d()
      if self.goal is None:
        self.goal = fukuro_common.msg.Point2d()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles = []
      for i in range(0, length):
        val1 = fukuro_common.msg.Point2d()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.obstacles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solutions = []
      for i in range(0, length):
        val1 = fukuro_common.msg.Point2d()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.solutions.append(val1)
      _x = self
      start = end
      end += 42
      (_x.start.x, _x.start.y, _x.goal.x, _x.goal.y, _x.search_time, _x.solved, _x.updated,) = _get_struct_5d2B().unpack(str[start:end])
      self.solved = bool(self.solved)
      self.updated = bool(self.updated)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_5d2B = None
def _get_struct_5d2B():
    global _struct_5d2B
    if _struct_5d2B is None:
        _struct_5d2B = struct.Struct("<5d2B")
    return _struct_5d2B
