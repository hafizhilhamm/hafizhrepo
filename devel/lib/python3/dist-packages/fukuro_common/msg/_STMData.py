# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fukuro_common/STMData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fukuro_common.msg

class STMData(genpy.Message):
  _md5sum = "1f74160987d11b971db5bf3af08f3ce7"
  _type = "fukuro_common/STMData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """MotorVel encoder
RobotVel freeenc
bool ready_kick
bool ir
bool garis1
bool garis2
bool garis3
bool garis4
================================================================================
MSG: fukuro_common/MotorVel
float32 m1
float32 m2
float32 m3
================================================================================
MSG: fukuro_common/RobotVel
float32 free1
float32 free2
float32 free3"""
  __slots__ = ['encoder','freeenc','ready_kick','ir','garis1','garis2','garis3','garis4']
  _slot_types = ['fukuro_common/MotorVel','fukuro_common/RobotVel','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       encoder,freeenc,ready_kick,ir,garis1,garis2,garis3,garis4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(STMData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.encoder is None:
        self.encoder = fukuro_common.msg.MotorVel()
      if self.freeenc is None:
        self.freeenc = fukuro_common.msg.RobotVel()
      if self.ready_kick is None:
        self.ready_kick = False
      if self.ir is None:
        self.ir = False
      if self.garis1 is None:
        self.garis1 = False
      if self.garis2 is None:
        self.garis2 = False
      if self.garis3 is None:
        self.garis3 = False
      if self.garis4 is None:
        self.garis4 = False
    else:
      self.encoder = fukuro_common.msg.MotorVel()
      self.freeenc = fukuro_common.msg.RobotVel()
      self.ready_kick = False
      self.ir = False
      self.garis1 = False
      self.garis2 = False
      self.garis3 = False
      self.garis4 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6f6B().pack(_x.encoder.m1, _x.encoder.m2, _x.encoder.m3, _x.freeenc.free1, _x.freeenc.free2, _x.freeenc.free3, _x.ready_kick, _x.ir, _x.garis1, _x.garis2, _x.garis3, _x.garis4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.encoder is None:
        self.encoder = fukuro_common.msg.MotorVel()
      if self.freeenc is None:
        self.freeenc = fukuro_common.msg.RobotVel()
      end = 0
      _x = self
      start = end
      end += 30
      (_x.encoder.m1, _x.encoder.m2, _x.encoder.m3, _x.freeenc.free1, _x.freeenc.free2, _x.freeenc.free3, _x.ready_kick, _x.ir, _x.garis1, _x.garis2, _x.garis3, _x.garis4,) = _get_struct_6f6B().unpack(str[start:end])
      self.ready_kick = bool(self.ready_kick)
      self.ir = bool(self.ir)
      self.garis1 = bool(self.garis1)
      self.garis2 = bool(self.garis2)
      self.garis3 = bool(self.garis3)
      self.garis4 = bool(self.garis4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6f6B().pack(_x.encoder.m1, _x.encoder.m2, _x.encoder.m3, _x.freeenc.free1, _x.freeenc.free2, _x.freeenc.free3, _x.ready_kick, _x.ir, _x.garis1, _x.garis2, _x.garis3, _x.garis4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.encoder is None:
        self.encoder = fukuro_common.msg.MotorVel()
      if self.freeenc is None:
        self.freeenc = fukuro_common.msg.RobotVel()
      end = 0
      _x = self
      start = end
      end += 30
      (_x.encoder.m1, _x.encoder.m2, _x.encoder.m3, _x.freeenc.free1, _x.freeenc.free2, _x.freeenc.free3, _x.ready_kick, _x.ir, _x.garis1, _x.garis2, _x.garis3, _x.garis4,) = _get_struct_6f6B().unpack(str[start:end])
      self.ready_kick = bool(self.ready_kick)
      self.ir = bool(self.ir)
      self.garis1 = bool(self.garis1)
      self.garis2 = bool(self.garis2)
      self.garis3 = bool(self.garis3)
      self.garis4 = bool(self.garis4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f6B = None
def _get_struct_6f6B():
    global _struct_6f6B
    if _struct_6f6B is None:
        _struct_6f6B = struct.Struct("<6f6B")
    return _struct_6f6B
