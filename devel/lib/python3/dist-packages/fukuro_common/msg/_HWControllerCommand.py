# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fukuro_common/HWControllerCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fukuro_common.msg

class HWControllerCommand(genpy.Message):
  _md5sum = "8649b21cff79d6ff662fd81507c1f841"
  _type = "fukuro_common/HWControllerCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """VelCmd vel
DribblerControl dribbler
MotorVel motor
int32 kick
bool pwm_test
bool motor_brake
================================================================================
MSG: fukuro_common/VelCmd
float64 vx
float64 vy
float64 w
================================================================================
MSG: fukuro_common/DribblerControl
uint8 dir_in
float32 speed
================================================================================
MSG: fukuro_common/MotorVel
float32 m1
float32 m2
float32 m3"""
  __slots__ = ['vel','dribbler','motor','kick','pwm_test','motor_brake']
  _slot_types = ['fukuro_common/VelCmd','fukuro_common/DribblerControl','fukuro_common/MotorVel','int32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vel,dribbler,motor,kick,pwm_test,motor_brake

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HWControllerCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vel is None:
        self.vel = fukuro_common.msg.VelCmd()
      if self.dribbler is None:
        self.dribbler = fukuro_common.msg.DribblerControl()
      if self.motor is None:
        self.motor = fukuro_common.msg.MotorVel()
      if self.kick is None:
        self.kick = 0
      if self.pwm_test is None:
        self.pwm_test = False
      if self.motor_brake is None:
        self.motor_brake = False
    else:
      self.vel = fukuro_common.msg.VelCmd()
      self.dribbler = fukuro_common.msg.DribblerControl()
      self.motor = fukuro_common.msg.MotorVel()
      self.kick = 0
      self.pwm_test = False
      self.motor_brake = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3dB4fi2B().pack(_x.vel.vx, _x.vel.vy, _x.vel.w, _x.dribbler.dir_in, _x.dribbler.speed, _x.motor.m1, _x.motor.m2, _x.motor.m3, _x.kick, _x.pwm_test, _x.motor_brake))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vel is None:
        self.vel = fukuro_common.msg.VelCmd()
      if self.dribbler is None:
        self.dribbler = fukuro_common.msg.DribblerControl()
      if self.motor is None:
        self.motor = fukuro_common.msg.MotorVel()
      end = 0
      _x = self
      start = end
      end += 47
      (_x.vel.vx, _x.vel.vy, _x.vel.w, _x.dribbler.dir_in, _x.dribbler.speed, _x.motor.m1, _x.motor.m2, _x.motor.m3, _x.kick, _x.pwm_test, _x.motor_brake,) = _get_struct_3dB4fi2B().unpack(str[start:end])
      self.pwm_test = bool(self.pwm_test)
      self.motor_brake = bool(self.motor_brake)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3dB4fi2B().pack(_x.vel.vx, _x.vel.vy, _x.vel.w, _x.dribbler.dir_in, _x.dribbler.speed, _x.motor.m1, _x.motor.m2, _x.motor.m3, _x.kick, _x.pwm_test, _x.motor_brake))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vel is None:
        self.vel = fukuro_common.msg.VelCmd()
      if self.dribbler is None:
        self.dribbler = fukuro_common.msg.DribblerControl()
      if self.motor is None:
        self.motor = fukuro_common.msg.MotorVel()
      end = 0
      _x = self
      start = end
      end += 47
      (_x.vel.vx, _x.vel.vy, _x.vel.w, _x.dribbler.dir_in, _x.dribbler.speed, _x.motor.m1, _x.motor.m2, _x.motor.m3, _x.kick, _x.pwm_test, _x.motor_brake,) = _get_struct_3dB4fi2B().unpack(str[start:end])
      self.pwm_test = bool(self.pwm_test)
      self.motor_brake = bool(self.motor_brake)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3dB4fi2B = None
def _get_struct_3dB4fi2B():
    global _struct_3dB4fi2B
    if _struct_3dB4fi2B is None:
        _struct_3dB4fi2B = struct.Struct("<3dB4fi2B")
    return _struct_3dB4fi2B
