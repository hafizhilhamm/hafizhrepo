# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fukuro_common/WorldModel.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fukuro_common.msg
import geometry_msgs.msg

class WorldModel(genpy.Message):
  _md5sum = "83b86ec7340f012e81177e9324633119"
  _type = "fukuro_common/WorldModel"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string robot_name
bool ball_visible
bool obstacle_visible
bool friend_visible
bool[] available
bool set_obstacle # untuk lomba online
geometry_msgs/Pose2D position
geometry_msgs/Pose2D[] teammates
geometry_msgs/Pose2D velocity
geometry_msgs/Point local_friend
geometry_msgs/Point global_friend
geometry_msgs/Point local_ball
geometry_msgs/Point global_ball
geometry_msgs/Point[] local_balls
geometry_msgs/Point[] balls
geometry_msgs/Point[] way_points
Obstacle[] obstacles
Obstacle obstacle1   # untuk lomba online
Obstacle obstacle2   # untuk lomba online
Obstacle kiper_obstacle # untuk lomba online
Point2d[] local_obstacles
Point2d[] global_obstacles
================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: fukuro_common/Obstacle
Point2d pos
float64 r
int8 shape
================================================================================
MSG: fukuro_common/Point2d
float64 x
float64 y"""
  __slots__ = ['robot_name','ball_visible','obstacle_visible','friend_visible','available','set_obstacle','position','teammates','velocity','local_friend','global_friend','local_ball','global_ball','local_balls','balls','way_points','obstacles','obstacle1','obstacle2','kiper_obstacle','local_obstacles','global_obstacles']
  _slot_types = ['string','bool','bool','bool','bool[]','bool','geometry_msgs/Pose2D','geometry_msgs/Pose2D[]','geometry_msgs/Pose2D','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point[]','geometry_msgs/Point[]','geometry_msgs/Point[]','fukuro_common/Obstacle[]','fukuro_common/Obstacle','fukuro_common/Obstacle','fukuro_common/Obstacle','fukuro_common/Point2d[]','fukuro_common/Point2d[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_name,ball_visible,obstacle_visible,friend_visible,available,set_obstacle,position,teammates,velocity,local_friend,global_friend,local_ball,global_ball,local_balls,balls,way_points,obstacles,obstacle1,obstacle2,kiper_obstacle,local_obstacles,global_obstacles

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WorldModel, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_name is None:
        self.robot_name = ''
      if self.ball_visible is None:
        self.ball_visible = False
      if self.obstacle_visible is None:
        self.obstacle_visible = False
      if self.friend_visible is None:
        self.friend_visible = False
      if self.available is None:
        self.available = []
      if self.set_obstacle is None:
        self.set_obstacle = False
      if self.position is None:
        self.position = geometry_msgs.msg.Pose2D()
      if self.teammates is None:
        self.teammates = []
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Pose2D()
      if self.local_friend is None:
        self.local_friend = geometry_msgs.msg.Point()
      if self.global_friend is None:
        self.global_friend = geometry_msgs.msg.Point()
      if self.local_ball is None:
        self.local_ball = geometry_msgs.msg.Point()
      if self.global_ball is None:
        self.global_ball = geometry_msgs.msg.Point()
      if self.local_balls is None:
        self.local_balls = []
      if self.balls is None:
        self.balls = []
      if self.way_points is None:
        self.way_points = []
      if self.obstacles is None:
        self.obstacles = []
      if self.obstacle1 is None:
        self.obstacle1 = fukuro_common.msg.Obstacle()
      if self.obstacle2 is None:
        self.obstacle2 = fukuro_common.msg.Obstacle()
      if self.kiper_obstacle is None:
        self.kiper_obstacle = fukuro_common.msg.Obstacle()
      if self.local_obstacles is None:
        self.local_obstacles = []
      if self.global_obstacles is None:
        self.global_obstacles = []
    else:
      self.robot_name = ''
      self.ball_visible = False
      self.obstacle_visible = False
      self.friend_visible = False
      self.available = []
      self.set_obstacle = False
      self.position = geometry_msgs.msg.Pose2D()
      self.teammates = []
      self.velocity = geometry_msgs.msg.Pose2D()
      self.local_friend = geometry_msgs.msg.Point()
      self.global_friend = geometry_msgs.msg.Point()
      self.local_ball = geometry_msgs.msg.Point()
      self.global_ball = geometry_msgs.msg.Point()
      self.local_balls = []
      self.balls = []
      self.way_points = []
      self.obstacles = []
      self.obstacle1 = fukuro_common.msg.Obstacle()
      self.obstacle2 = fukuro_common.msg.Obstacle()
      self.kiper_obstacle = fukuro_common.msg.Obstacle()
      self.local_obstacles = []
      self.global_obstacles = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.ball_visible, _x.obstacle_visible, _x.friend_visible))
      length = len(self.available)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.available))
      _x = self
      buff.write(_get_struct_B3d().pack(_x.set_obstacle, _x.position.x, _x.position.y, _x.position.theta))
      length = len(self.teammates)
      buff.write(_struct_I.pack(length))
      for val1 in self.teammates:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      _x = self
      buff.write(_get_struct_15d().pack(_x.velocity.x, _x.velocity.y, _x.velocity.theta, _x.local_friend.x, _x.local_friend.y, _x.local_friend.z, _x.global_friend.x, _x.global_friend.y, _x.global_friend.z, _x.local_ball.x, _x.local_ball.y, _x.local_ball.z, _x.global_ball.x, _x.global_ball.y, _x.global_ball.z))
      length = len(self.local_balls)
      buff.write(_struct_I.pack(length))
      for val1 in self.local_balls:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.balls)
      buff.write(_struct_I.pack(length))
      for val1 in self.balls:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.way_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.way_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles:
        _v1 = val1.pos
        _x = _v1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_db().pack(_x.r, _x.shape))
      _x = self
      buff.write(_get_struct_3db3db3db().pack(_x.obstacle1.pos.x, _x.obstacle1.pos.y, _x.obstacle1.r, _x.obstacle1.shape, _x.obstacle2.pos.x, _x.obstacle2.pos.y, _x.obstacle2.r, _x.obstacle2.shape, _x.kiper_obstacle.pos.x, _x.kiper_obstacle.pos.y, _x.kiper_obstacle.r, _x.kiper_obstacle.shape))
      length = len(self.local_obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.local_obstacles:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.global_obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_obstacles:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Pose2D()
      if self.teammates is None:
        self.teammates = None
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Pose2D()
      if self.local_friend is None:
        self.local_friend = geometry_msgs.msg.Point()
      if self.global_friend is None:
        self.global_friend = geometry_msgs.msg.Point()
      if self.local_ball is None:
        self.local_ball = geometry_msgs.msg.Point()
      if self.global_ball is None:
        self.global_ball = geometry_msgs.msg.Point()
      if self.local_balls is None:
        self.local_balls = None
      if self.balls is None:
        self.balls = None
      if self.way_points is None:
        self.way_points = None
      if self.obstacles is None:
        self.obstacles = None
      if self.obstacle1 is None:
        self.obstacle1 = fukuro_common.msg.Obstacle()
      if self.obstacle2 is None:
        self.obstacle2 = fukuro_common.msg.Obstacle()
      if self.kiper_obstacle is None:
        self.kiper_obstacle = fukuro_common.msg.Obstacle()
      if self.local_obstacles is None:
        self.local_obstacles = None
      if self.global_obstacles is None:
        self.global_obstacles = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_name = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.ball_visible, _x.obstacle_visible, _x.friend_visible,) = _get_struct_3B().unpack(str[start:end])
      self.ball_visible = bool(self.ball_visible)
      self.obstacle_visible = bool(self.obstacle_visible)
      self.friend_visible = bool(self.friend_visible)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.available = s.unpack(str[start:end])
      self.available = list(map(bool, self.available))
      _x = self
      start = end
      end += 25
      (_x.set_obstacle, _x.position.x, _x.position.y, _x.position.theta,) = _get_struct_B3d().unpack(str[start:end])
      self.set_obstacle = bool(self.set_obstacle)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.teammates = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose2D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.teammates.append(val1)
      _x = self
      start = end
      end += 120
      (_x.velocity.x, _x.velocity.y, _x.velocity.theta, _x.local_friend.x, _x.local_friend.y, _x.local_friend.z, _x.global_friend.x, _x.global_friend.y, _x.global_friend.z, _x.local_ball.x, _x.local_ball.y, _x.local_ball.z, _x.global_ball.x, _x.global_ball.y, _x.global_ball.z,) = _get_struct_15d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.local_balls = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.local_balls.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.balls = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.balls.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.way_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.way_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles = []
      for i in range(0, length):
        val1 = fukuro_common.msg.Obstacle()
        _v2 = val1.pos
        _x = _v2
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.r, _x.shape,) = _get_struct_db().unpack(str[start:end])
        self.obstacles.append(val1)
      _x = self
      start = end
      end += 75
      (_x.obstacle1.pos.x, _x.obstacle1.pos.y, _x.obstacle1.r, _x.obstacle1.shape, _x.obstacle2.pos.x, _x.obstacle2.pos.y, _x.obstacle2.r, _x.obstacle2.shape, _x.kiper_obstacle.pos.x, _x.kiper_obstacle.pos.y, _x.kiper_obstacle.r, _x.kiper_obstacle.shape,) = _get_struct_3db3db3db().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.local_obstacles = []
      for i in range(0, length):
        val1 = fukuro_common.msg.Point2d()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.local_obstacles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_obstacles = []
      for i in range(0, length):
        val1 = fukuro_common.msg.Point2d()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.global_obstacles.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.ball_visible, _x.obstacle_visible, _x.friend_visible))
      length = len(self.available)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.available.tostring())
      _x = self
      buff.write(_get_struct_B3d().pack(_x.set_obstacle, _x.position.x, _x.position.y, _x.position.theta))
      length = len(self.teammates)
      buff.write(_struct_I.pack(length))
      for val1 in self.teammates:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      _x = self
      buff.write(_get_struct_15d().pack(_x.velocity.x, _x.velocity.y, _x.velocity.theta, _x.local_friend.x, _x.local_friend.y, _x.local_friend.z, _x.global_friend.x, _x.global_friend.y, _x.global_friend.z, _x.local_ball.x, _x.local_ball.y, _x.local_ball.z, _x.global_ball.x, _x.global_ball.y, _x.global_ball.z))
      length = len(self.local_balls)
      buff.write(_struct_I.pack(length))
      for val1 in self.local_balls:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.balls)
      buff.write(_struct_I.pack(length))
      for val1 in self.balls:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.way_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.way_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles:
        _v3 = val1.pos
        _x = _v3
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_db().pack(_x.r, _x.shape))
      _x = self
      buff.write(_get_struct_3db3db3db().pack(_x.obstacle1.pos.x, _x.obstacle1.pos.y, _x.obstacle1.r, _x.obstacle1.shape, _x.obstacle2.pos.x, _x.obstacle2.pos.y, _x.obstacle2.r, _x.obstacle2.shape, _x.kiper_obstacle.pos.x, _x.kiper_obstacle.pos.y, _x.kiper_obstacle.r, _x.kiper_obstacle.shape))
      length = len(self.local_obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.local_obstacles:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
      length = len(self.global_obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_obstacles:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Pose2D()
      if self.teammates is None:
        self.teammates = None
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Pose2D()
      if self.local_friend is None:
        self.local_friend = geometry_msgs.msg.Point()
      if self.global_friend is None:
        self.global_friend = geometry_msgs.msg.Point()
      if self.local_ball is None:
        self.local_ball = geometry_msgs.msg.Point()
      if self.global_ball is None:
        self.global_ball = geometry_msgs.msg.Point()
      if self.local_balls is None:
        self.local_balls = None
      if self.balls is None:
        self.balls = None
      if self.way_points is None:
        self.way_points = None
      if self.obstacles is None:
        self.obstacles = None
      if self.obstacle1 is None:
        self.obstacle1 = fukuro_common.msg.Obstacle()
      if self.obstacle2 is None:
        self.obstacle2 = fukuro_common.msg.Obstacle()
      if self.kiper_obstacle is None:
        self.kiper_obstacle = fukuro_common.msg.Obstacle()
      if self.local_obstacles is None:
        self.local_obstacles = None
      if self.global_obstacles is None:
        self.global_obstacles = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_name = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.ball_visible, _x.obstacle_visible, _x.friend_visible,) = _get_struct_3B().unpack(str[start:end])
      self.ball_visible = bool(self.ball_visible)
      self.obstacle_visible = bool(self.obstacle_visible)
      self.friend_visible = bool(self.friend_visible)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.available = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.available = list(map(bool, self.available))
      _x = self
      start = end
      end += 25
      (_x.set_obstacle, _x.position.x, _x.position.y, _x.position.theta,) = _get_struct_B3d().unpack(str[start:end])
      self.set_obstacle = bool(self.set_obstacle)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.teammates = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose2D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.teammates.append(val1)
      _x = self
      start = end
      end += 120
      (_x.velocity.x, _x.velocity.y, _x.velocity.theta, _x.local_friend.x, _x.local_friend.y, _x.local_friend.z, _x.global_friend.x, _x.global_friend.y, _x.global_friend.z, _x.local_ball.x, _x.local_ball.y, _x.local_ball.z, _x.global_ball.x, _x.global_ball.y, _x.global_ball.z,) = _get_struct_15d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.local_balls = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.local_balls.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.balls = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.balls.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.way_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.way_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles = []
      for i in range(0, length):
        val1 = fukuro_common.msg.Obstacle()
        _v4 = val1.pos
        _x = _v4
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.r, _x.shape,) = _get_struct_db().unpack(str[start:end])
        self.obstacles.append(val1)
      _x = self
      start = end
      end += 75
      (_x.obstacle1.pos.x, _x.obstacle1.pos.y, _x.obstacle1.r, _x.obstacle1.shape, _x.obstacle2.pos.x, _x.obstacle2.pos.y, _x.obstacle2.r, _x.obstacle2.shape, _x.kiper_obstacle.pos.x, _x.kiper_obstacle.pos.y, _x.kiper_obstacle.r, _x.kiper_obstacle.shape,) = _get_struct_3db3db3db().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.local_obstacles = []
      for i in range(0, length):
        val1 = fukuro_common.msg.Point2d()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.local_obstacles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_obstacles = []
      for i in range(0, length):
        val1 = fukuro_common.msg.Point2d()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        self.global_obstacles.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15d = None
def _get_struct_15d():
    global _struct_15d
    if _struct_15d is None:
        _struct_15d = struct.Struct("<15d")
    return _struct_15d
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3db3db3db = None
def _get_struct_3db3db3db():
    global _struct_3db3db3db
    if _struct_3db3db3db is None:
        _struct_3db3db3db = struct.Struct("<3db3db3db")
    return _struct_3db3db3db
_struct_B3d = None
def _get_struct_B3d():
    global _struct_B3d
    if _struct_B3d is None:
        _struct_B3d = struct.Struct("<B3d")
    return _struct_B3d
_struct_db = None
def _get_struct_db():
    global _struct_db
    if _struct_db is None:
        _struct_db = struct.Struct("<db")
    return _struct_db
