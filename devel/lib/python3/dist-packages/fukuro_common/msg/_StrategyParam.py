# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fukuro_common/StrategyParam.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StrategyParam(genpy.Message):
  _md5sum = "21766f045e3facf112f156a585dc8583"
  _type = "fukuro_common/StrategyParam"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 radius_dribble_auto_on
float32 angle_dribble_auto_on
float32 radius_mulai_dribble_bola
float32 angle_mulai_dribble_bola
float32 min_error_posisi_kick
float32 min_error_sudut_kick
float32 min_error_posisi_homing
float32 min_error_sudut_homing
float32 error_positioning
float32 error_sudut_positioning
float32 radius_mulai_kick_off
float32 upper_saturate
float32 lower_saturate
float32 upper_saturate_engaged
float32 lower_saturate_engaged
float32 max_angle_saturate"""
  __slots__ = ['radius_dribble_auto_on','angle_dribble_auto_on','radius_mulai_dribble_bola','angle_mulai_dribble_bola','min_error_posisi_kick','min_error_sudut_kick','min_error_posisi_homing','min_error_sudut_homing','error_positioning','error_sudut_positioning','radius_mulai_kick_off','upper_saturate','lower_saturate','upper_saturate_engaged','lower_saturate_engaged','max_angle_saturate']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       radius_dribble_auto_on,angle_dribble_auto_on,radius_mulai_dribble_bola,angle_mulai_dribble_bola,min_error_posisi_kick,min_error_sudut_kick,min_error_posisi_homing,min_error_sudut_homing,error_positioning,error_sudut_positioning,radius_mulai_kick_off,upper_saturate,lower_saturate,upper_saturate_engaged,lower_saturate_engaged,max_angle_saturate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StrategyParam, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.radius_dribble_auto_on is None:
        self.radius_dribble_auto_on = 0.
      if self.angle_dribble_auto_on is None:
        self.angle_dribble_auto_on = 0.
      if self.radius_mulai_dribble_bola is None:
        self.radius_mulai_dribble_bola = 0.
      if self.angle_mulai_dribble_bola is None:
        self.angle_mulai_dribble_bola = 0.
      if self.min_error_posisi_kick is None:
        self.min_error_posisi_kick = 0.
      if self.min_error_sudut_kick is None:
        self.min_error_sudut_kick = 0.
      if self.min_error_posisi_homing is None:
        self.min_error_posisi_homing = 0.
      if self.min_error_sudut_homing is None:
        self.min_error_sudut_homing = 0.
      if self.error_positioning is None:
        self.error_positioning = 0.
      if self.error_sudut_positioning is None:
        self.error_sudut_positioning = 0.
      if self.radius_mulai_kick_off is None:
        self.radius_mulai_kick_off = 0.
      if self.upper_saturate is None:
        self.upper_saturate = 0.
      if self.lower_saturate is None:
        self.lower_saturate = 0.
      if self.upper_saturate_engaged is None:
        self.upper_saturate_engaged = 0.
      if self.lower_saturate_engaged is None:
        self.lower_saturate_engaged = 0.
      if self.max_angle_saturate is None:
        self.max_angle_saturate = 0.
    else:
      self.radius_dribble_auto_on = 0.
      self.angle_dribble_auto_on = 0.
      self.radius_mulai_dribble_bola = 0.
      self.angle_mulai_dribble_bola = 0.
      self.min_error_posisi_kick = 0.
      self.min_error_sudut_kick = 0.
      self.min_error_posisi_homing = 0.
      self.min_error_sudut_homing = 0.
      self.error_positioning = 0.
      self.error_sudut_positioning = 0.
      self.radius_mulai_kick_off = 0.
      self.upper_saturate = 0.
      self.lower_saturate = 0.
      self.upper_saturate_engaged = 0.
      self.lower_saturate_engaged = 0.
      self.max_angle_saturate = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_16f().pack(_x.radius_dribble_auto_on, _x.angle_dribble_auto_on, _x.radius_mulai_dribble_bola, _x.angle_mulai_dribble_bola, _x.min_error_posisi_kick, _x.min_error_sudut_kick, _x.min_error_posisi_homing, _x.min_error_sudut_homing, _x.error_positioning, _x.error_sudut_positioning, _x.radius_mulai_kick_off, _x.upper_saturate, _x.lower_saturate, _x.upper_saturate_engaged, _x.lower_saturate_engaged, _x.max_angle_saturate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.radius_dribble_auto_on, _x.angle_dribble_auto_on, _x.radius_mulai_dribble_bola, _x.angle_mulai_dribble_bola, _x.min_error_posisi_kick, _x.min_error_sudut_kick, _x.min_error_posisi_homing, _x.min_error_sudut_homing, _x.error_positioning, _x.error_sudut_positioning, _x.radius_mulai_kick_off, _x.upper_saturate, _x.lower_saturate, _x.upper_saturate_engaged, _x.lower_saturate_engaged, _x.max_angle_saturate,) = _get_struct_16f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_16f().pack(_x.radius_dribble_auto_on, _x.angle_dribble_auto_on, _x.radius_mulai_dribble_bola, _x.angle_mulai_dribble_bola, _x.min_error_posisi_kick, _x.min_error_sudut_kick, _x.min_error_posisi_homing, _x.min_error_sudut_homing, _x.error_positioning, _x.error_sudut_positioning, _x.radius_mulai_kick_off, _x.upper_saturate, _x.lower_saturate, _x.upper_saturate_engaged, _x.lower_saturate_engaged, _x.max_angle_saturate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.radius_dribble_auto_on, _x.angle_dribble_auto_on, _x.radius_mulai_dribble_bola, _x.angle_mulai_dribble_bola, _x.min_error_posisi_kick, _x.min_error_sudut_kick, _x.min_error_posisi_homing, _x.min_error_sudut_homing, _x.error_positioning, _x.error_sudut_positioning, _x.radius_mulai_kick_off, _x.upper_saturate, _x.lower_saturate, _x.upper_saturate_engaged, _x.lower_saturate_engaged, _x.max_angle_saturate,) = _get_struct_16f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16f = None
def _get_struct_16f():
    global _struct_16f
    if _struct_16f is None:
        _struct_16f = struct.Struct("<16f")
    return _struct_16f
