# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fukuro_common/HWControllerParamRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fukuro_common.msg

class HWControllerParamRequest(genpy.Message):
  _md5sum = "cebca7b8ef71cbcc546a13f7adc0c415"
  _type = "fukuro_common/HWControllerParamRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """MotorParameter cw
MotorParameter ccw

================================================================================
MSG: fukuro_common/MotorParameter
int8 n_speed
float64[] motor1
float64[] motor2
float64[] motor3"""
  __slots__ = ['cw','ccw']
  _slot_types = ['fukuro_common/MotorParameter','fukuro_common/MotorParameter']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cw,ccw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HWControllerParamRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cw is None:
        self.cw = fukuro_common.msg.MotorParameter()
      if self.ccw is None:
        self.ccw = fukuro_common.msg.MotorParameter()
    else:
      self.cw = fukuro_common.msg.MotorParameter()
      self.ccw = fukuro_common.msg.MotorParameter()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.cw.n_speed
      buff.write(_get_struct_b().pack(_x))
      length = len(self.cw.motor1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.cw.motor1))
      length = len(self.cw.motor2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.cw.motor2))
      length = len(self.cw.motor3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.cw.motor3))
      _x = self.ccw.n_speed
      buff.write(_get_struct_b().pack(_x))
      length = len(self.ccw.motor1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ccw.motor1))
      length = len(self.ccw.motor2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ccw.motor2))
      length = len(self.ccw.motor3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ccw.motor3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cw is None:
        self.cw = fukuro_common.msg.MotorParameter()
      if self.ccw is None:
        self.ccw = fukuro_common.msg.MotorParameter()
      end = 0
      start = end
      end += 1
      (self.cw.n_speed,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cw.motor1 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cw.motor2 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cw.motor3 = s.unpack(str[start:end])
      start = end
      end += 1
      (self.ccw.n_speed,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ccw.motor1 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ccw.motor2 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ccw.motor3 = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.cw.n_speed
      buff.write(_get_struct_b().pack(_x))
      length = len(self.cw.motor1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.cw.motor1.tostring())
      length = len(self.cw.motor2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.cw.motor2.tostring())
      length = len(self.cw.motor3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.cw.motor3.tostring())
      _x = self.ccw.n_speed
      buff.write(_get_struct_b().pack(_x))
      length = len(self.ccw.motor1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ccw.motor1.tostring())
      length = len(self.ccw.motor2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ccw.motor2.tostring())
      length = len(self.ccw.motor3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ccw.motor3.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cw is None:
        self.cw = fukuro_common.msg.MotorParameter()
      if self.ccw is None:
        self.ccw = fukuro_common.msg.MotorParameter()
      end = 0
      start = end
      end += 1
      (self.cw.n_speed,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cw.motor1 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cw.motor2 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cw.motor3 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 1
      (self.ccw.n_speed,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ccw.motor1 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ccw.motor2 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ccw.motor3 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fukuro_common/HWControllerParamResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fukuro_common.msg

class HWControllerParamResponse(genpy.Message):
  _md5sum = "ff0b5bf0e538bb3b55d6c840655838b7"
  _type = "fukuro_common/HWControllerParamResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """MotorParameter cw
MotorParameter ccw
bool ok

================================================================================
MSG: fukuro_common/MotorParameter
int8 n_speed
float64[] motor1
float64[] motor2
float64[] motor3"""
  __slots__ = ['cw','ccw','ok']
  _slot_types = ['fukuro_common/MotorParameter','fukuro_common/MotorParameter','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cw,ccw,ok

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HWControllerParamResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cw is None:
        self.cw = fukuro_common.msg.MotorParameter()
      if self.ccw is None:
        self.ccw = fukuro_common.msg.MotorParameter()
      if self.ok is None:
        self.ok = False
    else:
      self.cw = fukuro_common.msg.MotorParameter()
      self.ccw = fukuro_common.msg.MotorParameter()
      self.ok = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.cw.n_speed
      buff.write(_get_struct_b().pack(_x))
      length = len(self.cw.motor1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.cw.motor1))
      length = len(self.cw.motor2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.cw.motor2))
      length = len(self.cw.motor3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.cw.motor3))
      _x = self.ccw.n_speed
      buff.write(_get_struct_b().pack(_x))
      length = len(self.ccw.motor1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ccw.motor1))
      length = len(self.ccw.motor2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ccw.motor2))
      length = len(self.ccw.motor3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.ccw.motor3))
      _x = self.ok
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cw is None:
        self.cw = fukuro_common.msg.MotorParameter()
      if self.ccw is None:
        self.ccw = fukuro_common.msg.MotorParameter()
      end = 0
      start = end
      end += 1
      (self.cw.n_speed,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cw.motor1 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cw.motor2 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cw.motor3 = s.unpack(str[start:end])
      start = end
      end += 1
      (self.ccw.n_speed,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ccw.motor1 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ccw.motor2 = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ccw.motor3 = s.unpack(str[start:end])
      start = end
      end += 1
      (self.ok,) = _get_struct_B().unpack(str[start:end])
      self.ok = bool(self.ok)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.cw.n_speed
      buff.write(_get_struct_b().pack(_x))
      length = len(self.cw.motor1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.cw.motor1.tostring())
      length = len(self.cw.motor2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.cw.motor2.tostring())
      length = len(self.cw.motor3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.cw.motor3.tostring())
      _x = self.ccw.n_speed
      buff.write(_get_struct_b().pack(_x))
      length = len(self.ccw.motor1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ccw.motor1.tostring())
      length = len(self.ccw.motor2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ccw.motor2.tostring())
      length = len(self.ccw.motor3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ccw.motor3.tostring())
      _x = self.ok
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cw is None:
        self.cw = fukuro_common.msg.MotorParameter()
      if self.ccw is None:
        self.ccw = fukuro_common.msg.MotorParameter()
      end = 0
      start = end
      end += 1
      (self.cw.n_speed,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cw.motor1 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cw.motor2 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.cw.motor3 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 1
      (self.ccw.n_speed,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ccw.motor1 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ccw.motor2 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ccw.motor3 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 1
      (self.ok,) = _get_struct_B().unpack(str[start:end])
      self.ok = bool(self.ok)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
class HWControllerParam(object):
  _type          = 'fukuro_common/HWControllerParam'
  _md5sum = 'e54c465f93b763147b0cf60d586ba040'
  _request_class  = HWControllerParamRequest
  _response_class = HWControllerParamResponse
