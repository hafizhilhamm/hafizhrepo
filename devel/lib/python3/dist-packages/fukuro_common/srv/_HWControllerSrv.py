# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fukuro_common/HWControllerSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fukuro_common.msg

class HWControllerSrvRequest(genpy.Message):
  _md5sum = "aa64da40807e371629cc4f509a53fcf9"
  _type = "fukuro_common/HWControllerSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 refresh
int64 STMConnect
uint8 isSTM
int64 ArduinoConnect
uint8 isArduino
Compass Compass

================================================================================
MSG: fukuro_common/Compass
float64 cmps"""
  __slots__ = ['refresh','STMConnect','isSTM','ArduinoConnect','isArduino','Compass']
  _slot_types = ['uint8','int64','uint8','int64','uint8','fukuro_common/Compass']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       refresh,STMConnect,isSTM,ArduinoConnect,isArduino,Compass

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HWControllerSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.refresh is None:
        self.refresh = 0
      if self.STMConnect is None:
        self.STMConnect = 0
      if self.isSTM is None:
        self.isSTM = 0
      if self.ArduinoConnect is None:
        self.ArduinoConnect = 0
      if self.isArduino is None:
        self.isArduino = 0
      if self.Compass is None:
        self.Compass = fukuro_common.msg.Compass()
    else:
      self.refresh = 0
      self.STMConnect = 0
      self.isSTM = 0
      self.ArduinoConnect = 0
      self.isArduino = 0
      self.Compass = fukuro_common.msg.Compass()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BqBqBd().pack(_x.refresh, _x.STMConnect, _x.isSTM, _x.ArduinoConnect, _x.isArduino, _x.Compass.cmps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Compass is None:
        self.Compass = fukuro_common.msg.Compass()
      end = 0
      _x = self
      start = end
      end += 27
      (_x.refresh, _x.STMConnect, _x.isSTM, _x.ArduinoConnect, _x.isArduino, _x.Compass.cmps,) = _get_struct_BqBqBd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BqBqBd().pack(_x.refresh, _x.STMConnect, _x.isSTM, _x.ArduinoConnect, _x.isArduino, _x.Compass.cmps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Compass is None:
        self.Compass = fukuro_common.msg.Compass()
      end = 0
      _x = self
      start = end
      end += 27
      (_x.refresh, _x.STMConnect, _x.isSTM, _x.ArduinoConnect, _x.isArduino, _x.Compass.cmps,) = _get_struct_BqBqBd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BqBqBd = None
def _get_struct_BqBqBd():
    global _struct_BqBqBd
    if _struct_BqBqBd is None:
        _struct_BqBqBd = struct.Struct("<BqBqBd")
    return _struct_BqBqBd
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fukuro_common/HWControllerSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HWControllerSrvResponse(genpy.Message):
  _md5sum = "15c18a38ca129ceffe9c3e2ec45ec9e1"
  _type = "fukuro_common/HWControllerSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string[] port_list
string[] manufacturer_list
uint8 STMSuccess
uint8 ArduinoSuccess
uint8 Compassuccess
"""
  __slots__ = ['port_list','manufacturer_list','STMSuccess','ArduinoSuccess','Compassuccess']
  _slot_types = ['string[]','string[]','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       port_list,manufacturer_list,STMSuccess,ArduinoSuccess,Compassuccess

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HWControllerSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.port_list is None:
        self.port_list = []
      if self.manufacturer_list is None:
        self.manufacturer_list = []
      if self.STMSuccess is None:
        self.STMSuccess = 0
      if self.ArduinoSuccess is None:
        self.ArduinoSuccess = 0
      if self.Compassuccess is None:
        self.Compassuccess = 0
    else:
      self.port_list = []
      self.manufacturer_list = []
      self.STMSuccess = 0
      self.ArduinoSuccess = 0
      self.Compassuccess = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.port_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.port_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.manufacturer_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.manufacturer_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_3B().pack(_x.STMSuccess, _x.ArduinoSuccess, _x.Compassuccess))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.port_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.port_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.manufacturer_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.manufacturer_list.append(val1)
      _x = self
      start = end
      end += 3
      (_x.STMSuccess, _x.ArduinoSuccess, _x.Compassuccess,) = _get_struct_3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.port_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.port_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.manufacturer_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.manufacturer_list:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_3B().pack(_x.STMSuccess, _x.ArduinoSuccess, _x.Compassuccess))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.port_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.port_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.manufacturer_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.manufacturer_list.append(val1)
      _x = self
      start = end
      end += 3
      (_x.STMSuccess, _x.ArduinoSuccess, _x.Compassuccess,) = _get_struct_3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
class HWControllerSrv(object):
  _type          = 'fukuro_common/HWControllerSrv'
  _md5sum = '3d5c94862d83cd0042f79f7755128b97'
  _request_class  = HWControllerSrvRequest
  _response_class = HWControllerSrvResponse
