# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fukuro_common/StaticObstaclesRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StaticObstaclesRequest(genpy.Message):
  _md5sum = "c73a535d4322a594587f130ce0daad38"
  _type = "fukuro_common/StaticObstaclesRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool obstacle1
bool obstacle2
bool obstacle3
bool obstacle4
bool obstacle5
bool obstacle6
bool obstacle7
bool obstacle8
bool obstacle_kiper
"""
  __slots__ = ['obstacle1','obstacle2','obstacle3','obstacle4','obstacle5','obstacle6','obstacle7','obstacle8','obstacle_kiper']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obstacle1,obstacle2,obstacle3,obstacle4,obstacle5,obstacle6,obstacle7,obstacle8,obstacle_kiper

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StaticObstaclesRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.obstacle1 is None:
        self.obstacle1 = False
      if self.obstacle2 is None:
        self.obstacle2 = False
      if self.obstacle3 is None:
        self.obstacle3 = False
      if self.obstacle4 is None:
        self.obstacle4 = False
      if self.obstacle5 is None:
        self.obstacle5 = False
      if self.obstacle6 is None:
        self.obstacle6 = False
      if self.obstacle7 is None:
        self.obstacle7 = False
      if self.obstacle8 is None:
        self.obstacle8 = False
      if self.obstacle_kiper is None:
        self.obstacle_kiper = False
    else:
      self.obstacle1 = False
      self.obstacle2 = False
      self.obstacle3 = False
      self.obstacle4 = False
      self.obstacle5 = False
      self.obstacle6 = False
      self.obstacle7 = False
      self.obstacle8 = False
      self.obstacle_kiper = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.obstacle1, _x.obstacle2, _x.obstacle3, _x.obstacle4, _x.obstacle5, _x.obstacle6, _x.obstacle7, _x.obstacle8, _x.obstacle_kiper))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.obstacle1, _x.obstacle2, _x.obstacle3, _x.obstacle4, _x.obstacle5, _x.obstacle6, _x.obstacle7, _x.obstacle8, _x.obstacle_kiper,) = _get_struct_9B().unpack(str[start:end])
      self.obstacle1 = bool(self.obstacle1)
      self.obstacle2 = bool(self.obstacle2)
      self.obstacle3 = bool(self.obstacle3)
      self.obstacle4 = bool(self.obstacle4)
      self.obstacle5 = bool(self.obstacle5)
      self.obstacle6 = bool(self.obstacle6)
      self.obstacle7 = bool(self.obstacle7)
      self.obstacle8 = bool(self.obstacle8)
      self.obstacle_kiper = bool(self.obstacle_kiper)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.obstacle1, _x.obstacle2, _x.obstacle3, _x.obstacle4, _x.obstacle5, _x.obstacle6, _x.obstacle7, _x.obstacle8, _x.obstacle_kiper))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.obstacle1, _x.obstacle2, _x.obstacle3, _x.obstacle4, _x.obstacle5, _x.obstacle6, _x.obstacle7, _x.obstacle8, _x.obstacle_kiper,) = _get_struct_9B().unpack(str[start:end])
      self.obstacle1 = bool(self.obstacle1)
      self.obstacle2 = bool(self.obstacle2)
      self.obstacle3 = bool(self.obstacle3)
      self.obstacle4 = bool(self.obstacle4)
      self.obstacle5 = bool(self.obstacle5)
      self.obstacle6 = bool(self.obstacle6)
      self.obstacle7 = bool(self.obstacle7)
      self.obstacle8 = bool(self.obstacle8)
      self.obstacle_kiper = bool(self.obstacle_kiper)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9B = None
def _get_struct_9B():
    global _struct_9B
    if _struct_9B is None:
        _struct_9B = struct.Struct("<9B")
    return _struct_9B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fukuro_common/StaticObstaclesResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StaticObstaclesResponse(genpy.Message):
  _md5sum = "ebb43f57b7820ff999dc120ba80eb7d8"
  _type = "fukuro_common/StaticObstaclesResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 ok

"""
  __slots__ = ['ok']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ok

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StaticObstaclesResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ok is None:
        self.ok = 0
    else:
      self.ok = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ok
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.ok,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ok
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.ok,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class StaticObstacles(object):
  _type          = 'fukuro_common/StaticObstacles'
  _md5sum = 'd9e5d5b887b6aabe5a57861e1897da91'
  _request_class  = StaticObstaclesRequest
  _response_class = StaticObstaclesResponse
